// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmweb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmweb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class GetQRCodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetQRCodeRequest> {
} _GetQRCodeRequest_default_instance_;
class GetQRCodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetQRCodeResponse> {
} _GetQRCodeResponse_default_instance_;
class RevokeChatRoomQRCodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RevokeChatRoomQRCodeRequest> {
} _RevokeChatRoomQRCodeRequest_default_instance_;
class RevokeChatRoomQRCodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RevokeChatRoomQRCodeResponse> {
} _RevokeChatRoomQRCodeResponse_default_instance_;
class SendQRCodeByEmailReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendQRCodeByEmailReq> {
} _SendQRCodeByEmailReq_default_instance_;
class SendQRCodeByEmailRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendQRCodeByEmailResp> {
} _SendQRCodeByEmailResp_default_instance_;
class GetCardRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardRequest> {
} _GetCardRequest_default_instance_;
class GetCardResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardResponse> {
} _GetCardResponse_default_instance_;
class HeartBeatRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatRequest> {
} _HeartBeatRequest_default_instance_;
class HeartBeatResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatResponse> {
} _HeartBeatResponse_default_instance_;
class GetCliDBEncryptInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCliDBEncryptInfoRequest> {
} _GetCliDBEncryptInfoRequest_default_instance_;
class GetCliDBEncryptInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCliDBEncryptInfoResponse> {
} _GetCliDBEncryptInfoResponse_default_instance_;
class GetImUnreadMsgCountRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetImUnreadMsgCountRequest> {
} _GetImUnreadMsgCountRequest_default_instance_;
class GetImUnreadMsgCountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetImUnreadMsgCountResponse> {
} _GetImUnreadMsgCountResponse_default_instance_;
class GetLocImgRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLocImgRequest> {
} _GetLocImgRequest_default_instance_;
class GetLocImgResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLocImgResponse> {
} _GetLocImgResponse_default_instance_;
class GetWeChatOutCouponsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetWeChatOutCouponsRequest> {
} _GetWeChatOutCouponsRequest_default_instance_;
class GetWeChatOutCouponsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetWeChatOutCouponsResponse> {
} _GetWeChatOutCouponsResponse_default_instance_;

namespace protobuf_mmweb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeRequest, style_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeResponse, qrcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeResponse, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQRCodeResponse, footerwording_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeRequest, qrcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeRequest, chatroomusername_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeChatRoomQRCodeResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, qrcodeusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, tocount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, tolist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, tittle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailReq, content_),
  3,
  0,
  4,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQRCodeByEmailResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardRequest, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResponse, image_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, bluetoothbroadcastcontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, scene_),
  0,
  3,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, nexttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, bluetoothbroadcastcontent_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoRequest, certversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoRequest, clidbencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoRequest, clidbencryptinfo_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoResponse, clidbencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCliDBEncryptInfoResponse, clidbencryptinfo_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountResponse, displaymsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountResponse, qqscheme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImUnreadMsgCountResponse, downloadurl_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, maptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgRequest, zoomlevel_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocImgResponse, imgbuf_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeChatOutCouponsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeChatOutCouponsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeChatOutCouponsRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeChatOutCouponsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeChatOutCouponsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeChatOutCouponsResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeChatOutCouponsResponse, coupons_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(GetQRCodeRequest)},
  { 11, 20, sizeof(GetQRCodeResponse)},
  { 24, 32, sizeof(RevokeChatRoomQRCodeRequest)},
  { 35, 41, sizeof(RevokeChatRoomQRCodeResponse)},
  { 42, 53, sizeof(SendQRCodeByEmailReq)},
  { 59, 65, sizeof(SendQRCodeByEmailResp)},
  { 66, 73, sizeof(GetCardRequest)},
  { 75, 82, sizeof(GetCardResponse)},
  { 84, 94, sizeof(HeartBeatRequest)},
  { 99, 108, sizeof(HeartBeatResponse)},
  { 112, 121, sizeof(GetCliDBEncryptInfoRequest)},
  { 125, 133, sizeof(GetCliDBEncryptInfoResponse)},
  { 136, 142, sizeof(GetImUnreadMsgCountRequest)},
  { 143, 152, sizeof(GetImUnreadMsgCountResponse)},
  { 156, 169, sizeof(GetLocImgRequest)},
  { 177, 184, sizeof(GetLocImgResponse)},
  { 186, 192, sizeof(GetWeChatOutCouponsRequest)},
  { 193, 200, sizeof(GetWeChatOutCouponsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetQRCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetQRCodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RevokeChatRoomQRCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RevokeChatRoomQRCodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendQRCodeByEmailReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendQRCodeByEmailResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCliDBEncryptInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCliDBEncryptInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetImUnreadMsgCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetImUnreadMsgCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLocImgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLocImgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetWeChatOutCouponsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetWeChatOutCouponsResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmweb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace

void TableStruct::Shutdown() {
  _GetQRCodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GetQRCodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RevokeChatRoomQRCodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RevokeChatRoomQRCodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SendQRCodeByEmailReq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SendQRCodeByEmailResp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _GetCardRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetCardResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _HeartBeatRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _HeartBeatResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetCliDBEncryptInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GetCliDBEncryptInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _GetImUnreadMsgCountRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GetImUnreadMsgCountResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _GetLocImgRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GetLocImgResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetWeChatOutCouponsRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GetWeChatOutCouponsResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _GetQRCodeRequest_default_instance_.DefaultConstruct();
  _GetQRCodeResponse_default_instance_.DefaultConstruct();
  _RevokeChatRoomQRCodeRequest_default_instance_.DefaultConstruct();
  _RevokeChatRoomQRCodeResponse_default_instance_.DefaultConstruct();
  _SendQRCodeByEmailReq_default_instance_.DefaultConstruct();
  _SendQRCodeByEmailResp_default_instance_.DefaultConstruct();
  _GetCardRequest_default_instance_.DefaultConstruct();
  _GetCardResponse_default_instance_.DefaultConstruct();
  _HeartBeatRequest_default_instance_.DefaultConstruct();
  _HeartBeatResponse_default_instance_.DefaultConstruct();
  _GetCliDBEncryptInfoRequest_default_instance_.DefaultConstruct();
  _GetCliDBEncryptInfoResponse_default_instance_.DefaultConstruct();
  _GetImUnreadMsgCountRequest_default_instance_.DefaultConstruct();
  _GetImUnreadMsgCountResponse_default_instance_.DefaultConstruct();
  _GetLocImgRequest_default_instance_.DefaultConstruct();
  _GetLocImgResponse_default_instance_.DefaultConstruct();
  _GetWeChatOutCouponsRequest_default_instance_.DefaultConstruct();
  _GetWeChatOutCouponsResponse_default_instance_.DefaultConstruct();
  _GetQRCodeRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetQRCodeRequest_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _GetQRCodeResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetQRCodeResponse_default_instance_.get_mutable()->qrcode_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _RevokeChatRoomQRCodeRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _RevokeChatRoomQRCodeResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SendQRCodeByEmailReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SendQRCodeByEmailResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCardRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCardResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCardResponse_default_instance_.get_mutable()->image_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _HeartBeatRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _HeartBeatRequest_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _HeartBeatRequest_default_instance_.get_mutable()->bluetoothbroadcastcontent_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _HeartBeatResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _HeartBeatResponse_default_instance_.get_mutable()->bluetoothbroadcastcontent_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetCliDBEncryptInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCliDBEncryptInfoRequest_default_instance_.get_mutable()->clidbencryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetCliDBEncryptInfoRequest_default_instance_.get_mutable()->clidbencryptinfo_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetCliDBEncryptInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCliDBEncryptInfoResponse_default_instance_.get_mutable()->clidbencryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetCliDBEncryptInfoResponse_default_instance_.get_mutable()->clidbencryptinfo_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetImUnreadMsgCountRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetImUnreadMsgCountResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetLocImgRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetLocImgResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetLocImgResponse_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetWeChatOutCouponsRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetWeChatOutCouponsResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013mmweb.proto\022\010micromsg\032\023mmbuiltintype.p"
      "roto\032\014mmbase.proto\"|\n\020GetQRCodeRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022-\n\010UserName\030\002 \002(\0132\033.micromsg.SKBuilti"
      "nString_t\022\r\n\005Style\030\003 \002(\r\"\224\001\n\021GetQRCodeRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\022+\n\006QRCode\030\002 \002(\0132\033.micromsg."
      "SKBuiltinBuffer_t\022\r\n\005Style\030\005 \002(\r\022\025\n\rFoot"
      "erWording\030\006 \001(\t\"s\n\033RevokeChatRoomQRCodeR"
      "equest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.B"
      "aseRequest\022\016\n\006QRCode\030\002 \001(\t\022\030\n\020ChatRoomUs"
      "erName\030\003 \001(\t\"L\n\034RevokeChatRoomQRCodeResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\"\271\001\n\024SendQRCodeByEmailReq\022*\n\013B"
      "aseRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022"
      "\026\n\016QRCodeUserName\030\002 \001(\t\022\017\n\007ToCount\030\003 \002(\r"
      "\022+\n\006ToList\030\004 \003(\0132\033.micromsg.SKBuiltinStr"
      "ing_t\022\016\n\006Tittle\030\005 \001(\t\022\017\n\007Content\030\006 \001(\t\"E"
      "\n\025SendQRCodeByEmailResp\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\"J\n\016GetCard"
      "Request\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg."
      "BaseRequest\022\014\n\004Type\030\002 \002(\r\"k\n\017GetCardResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\022*\n\005Image\030\002 \002(\0132\033.micromsg.SKB"
      "uiltinBuffer_t\"\315\001\n\020HeartBeatRequest\022*\n\013B"
      "aseRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022"
      "\021\n\tTimeStamp\030\002 \002(\r\022+\n\006KeyBuf\030\003 \001(\0132\033.mic"
      "romsg.SKBuiltinBuffer_t\022>\n\031BlueToothBroa"
      "dCastContent\030\004 \001(\0132\033.micromsg.SKBuiltinB"
      "uffer_t\022\r\n\005Scene\030\005 \001(\r\"\245\001\n\021HeartBeatResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\022\020\n\010NextTime\030\002 \002(\r\022\020\n\010Selector"
      "\030\003 \001(\r\022>\n\031BlueToothBroadCastContent\030\004 \001("
      "\0132\033.micromsg.SKBuiltinBuffer_t\"\312\001\n\032GetCl"
      "iDBEncryptInfoRequest\022*\n\013BaseRequest\030\001 \002"
      "(\0132\025.micromsg.BaseRequest\022\023\n\013CertVersion"
      "\030\002 \002(\r\0224\n\017CliDBEncryptKey\030\003 \002(\0132\033.microm"
      "sg.SKBuiltinBuffer_t\0225\n\020CliDBEncryptInfo"
      "\030\004 \002(\0132\033.micromsg.SKBuiltinBuffer_t\"\270\001\n\033"
      "GetCliDBEncryptInfoResponse\022,\n\014BaseRespo"
      "nse\030\001 \002(\0132\026.micromsg.BaseResponse\0224\n\017Cli"
      "DBEncryptKey\030\002 \002(\0132\033.micromsg.SKBuiltinB"
      "uffer_t\0225\n\020CliDBEncryptInfo\030\003 \002(\0132\033.micr"
      "omsg.SKBuiltinBuffer_t\"H\n\032GetImUnreadMsg"
      "CountRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micr"
      "omsg.BaseRequest\"\206\001\n\033GetImUnreadMsgCount"
      "Response\022,\n\014BaseResponse\030\001 \002(\0132\026.microms"
      "g.BaseResponse\022\022\n\nDisplayMsg\030\002 \001(\t\022\020\n\010QQ"
      "Scheme\030\003 \001(\t\022\023\n\013DownloadUrl\030\004 \001(\t\"\270\001\n\020Ge"
      "tLocImgRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022\021\n\tLongitude\030\002 \002(\002\022\020\n"
      "\010Latitude\030\003 \002(\002\022\r\n\005Width\030\004 \002(\r\022\016\n\006Height"
      "\030\005 \002(\r\022\020\n\010Language\030\006 \001(\t\022\017\n\007MapType\030\007 \002("
      "\r\022\021\n\tZoomLevel\030\010 \002(\r\"n\n\021GetLocImgRespons"
      "e\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseR"
      "esponse\022+\n\006ImgBuf\030\002 \002(\0132\033.micromsg.SKBui"
      "ltinBuffer_t\"H\n\032GetWeChatOutCouponsReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\"\\\n\033GetWeChatOutCouponsResponse\022,\n"
      "\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespo"
      "nse\022\017\n\007Coupons\030\002 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmweb.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmweb_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetQRCodeRequest::kBaseRequestFieldNumber;
const int GetQRCodeRequest::kUserNameFieldNumber;
const int GetQRCodeRequest::kStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetQRCodeRequest::GetQRCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetQRCodeRequest)
}
GetQRCodeRequest::GetQRCodeRequest(const GetQRCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  style_ = from.style_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetQRCodeRequest)
}

void GetQRCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(style_));
}

GetQRCodeRequest::~GetQRCodeRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetQRCodeRequest)
  SharedDtor();
}

void GetQRCodeRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void GetQRCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQRCodeRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetQRCodeRequest& GetQRCodeRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetQRCodeRequest* GetQRCodeRequest::New(::google::protobuf::Arena* arena) const {
  GetQRCodeRequest* n = new GetQRCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetQRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetQRCodeRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  style_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetQRCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetQRCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Style = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetQRCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetQRCodeRequest)
  return false;
#undef DO_
}

void GetQRCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // required uint32 Style = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->style(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetQRCodeRequest)
}

::google::protobuf::uint8* GetQRCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // required uint32 Style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->style(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetQRCodeRequest)
  return target;
}

size_t GetQRCodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetQRCodeRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_style()) {
    // required uint32 Style = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->style());
  }

  return total_size;
}
size_t GetQRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetQRCodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required uint32 Style = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQRCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQRCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQRCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetQRCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetQRCodeRequest)
    MergeFrom(*source);
  }
}

void GetQRCodeRequest::MergeFrom(const GetQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000004u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetQRCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQRCodeRequest::CopyFrom(const GetQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQRCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetQRCodeRequest::Swap(GetQRCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQRCodeRequest::InternalSwap(GetQRCodeRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(username_, other->username_);
  std::swap(style_, other->style_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetQRCodeRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetQRCodeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetQRCodeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetQRCodeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetQRCodeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetQRCodeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetQRCodeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQRCodeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetQRCodeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQRCodeRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetQRCodeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetQRCodeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetQRCodeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQRCodeRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool GetQRCodeRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetQRCodeRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void GetQRCodeRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetQRCodeRequest::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& GetQRCodeRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQRCodeRequest.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* GetQRCodeRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQRCodeRequest.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* GetQRCodeRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetQRCodeRequest.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void GetQRCodeRequest::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQRCodeRequest.UserName)
}

// required uint32 Style = 3;
bool GetQRCodeRequest::has_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetQRCodeRequest::set_has_style() {
  _has_bits_[0] |= 0x00000004u;
}
void GetQRCodeRequest::clear_has_style() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetQRCodeRequest::clear_style() {
  style_ = 0u;
  clear_has_style();
}
::google::protobuf::uint32 GetQRCodeRequest::style() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQRCodeRequest.Style)
  return style_;
}
void GetQRCodeRequest::set_style(::google::protobuf::uint32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetQRCodeRequest.Style)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetQRCodeResponse::kBaseResponseFieldNumber;
const int GetQRCodeResponse::kQRCodeFieldNumber;
const int GetQRCodeResponse::kStyleFieldNumber;
const int GetQRCodeResponse::kFooterWordingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetQRCodeResponse::GetQRCodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetQRCodeResponse)
}
GetQRCodeResponse::GetQRCodeResponse(const GetQRCodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  footerwording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_footerwording()) {
    footerwording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.footerwording_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_qrcode()) {
    qrcode_ = new ::micromsg::SKBuiltinBuffer_t(*from.qrcode_);
  } else {
    qrcode_ = NULL;
  }
  style_ = from.style_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetQRCodeResponse)
}

void GetQRCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  footerwording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(style_));
}

GetQRCodeResponse::~GetQRCodeResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetQRCodeResponse)
  SharedDtor();
}

void GetQRCodeResponse::SharedDtor() {
  footerwording_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete qrcode_;
  }
}

void GetQRCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQRCodeResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetQRCodeResponse& GetQRCodeResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetQRCodeResponse* GetQRCodeResponse::New(::google::protobuf::Arena* arena) const {
  GetQRCodeResponse* n = new GetQRCodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetQRCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetQRCodeResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_footerwording()) {
      GOOGLE_DCHECK(!footerwording_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*footerwording_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_qrcode()) {
      GOOGLE_DCHECK(qrcode_ != NULL);
      qrcode_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  style_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetQRCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetQRCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qrcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Style = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FooterWording = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_footerwording()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->footerwording().data(), this->footerwording().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetQRCodeResponse.FooterWording");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetQRCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetQRCodeResponse)
  return false;
#undef DO_
}

void GetQRCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->qrcode_, output);
  }

  // required uint32 Style = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->style(), output);
  }

  // optional string FooterWording = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->footerwording().data(), this->footerwording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetQRCodeResponse.FooterWording");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->footerwording(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetQRCodeResponse)
}

::google::protobuf::uint8* GetQRCodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->qrcode_, deterministic, target);
  }

  // required uint32 Style = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->style(), target);
  }

  // optional string FooterWording = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->footerwording().data(), this->footerwording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetQRCodeResponse.FooterWording");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->footerwording(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetQRCodeResponse)
  return target;
}

size_t GetQRCodeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetQRCodeResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_qrcode()) {
    // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcode_);
  }

  if (has_style()) {
    // required uint32 Style = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->style());
  }

  return total_size;
}
size_t GetQRCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetQRCodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcode_);

    // required uint32 Style = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string FooterWording = 6;
  if (has_footerwording()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->footerwording());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQRCodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQRCodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQRCodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetQRCodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetQRCodeResponse)
    MergeFrom(*source);
  }
}

void GetQRCodeResponse::MergeFrom(const GetQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_footerwording();
      footerwording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.footerwording_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_qrcode()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.qrcode());
    }
    if (cached_has_bits & 0x00000008u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetQRCodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQRCodeResponse::CopyFrom(const GetQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQRCodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_qrcode()) {
    if (!this->qrcode_->IsInitialized()) return false;
  }
  return true;
}

void GetQRCodeResponse::Swap(GetQRCodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQRCodeResponse::InternalSwap(GetQRCodeResponse* other) {
  footerwording_.Swap(&other->footerwording_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(qrcode_, other->qrcode_);
  std::swap(style_, other->style_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetQRCodeResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetQRCodeResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetQRCodeResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetQRCodeResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetQRCodeResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetQRCodeResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetQRCodeResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQRCodeResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetQRCodeResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQRCodeResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetQRCodeResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetQRCodeResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetQRCodeResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQRCodeResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t QRCode = 2;
bool GetQRCodeResponse::has_qrcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetQRCodeResponse::set_has_qrcode() {
  _has_bits_[0] |= 0x00000004u;
}
void GetQRCodeResponse::clear_has_qrcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetQRCodeResponse::clear_qrcode() {
  if (qrcode_ != NULL) qrcode_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_qrcode();
}
const ::micromsg::SKBuiltinBuffer_t& GetQRCodeResponse::qrcode() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQRCodeResponse.QRCode)
  return qrcode_ != NULL ? *qrcode_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetQRCodeResponse::mutable_qrcode() {
  set_has_qrcode();
  if (qrcode_ == NULL) {
    qrcode_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQRCodeResponse.QRCode)
  return qrcode_;
}
::micromsg::SKBuiltinBuffer_t* GetQRCodeResponse::release_qrcode() {
  // @@protoc_insertion_point(field_release:micromsg.GetQRCodeResponse.QRCode)
  clear_has_qrcode();
  ::micromsg::SKBuiltinBuffer_t* temp = qrcode_;
  qrcode_ = NULL;
  return temp;
}
void GetQRCodeResponse::set_allocated_qrcode(::micromsg::SKBuiltinBuffer_t* qrcode) {
  delete qrcode_;
  qrcode_ = qrcode;
  if (qrcode) {
    set_has_qrcode();
  } else {
    clear_has_qrcode();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQRCodeResponse.QRCode)
}

// required uint32 Style = 5;
bool GetQRCodeResponse::has_style() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetQRCodeResponse::set_has_style() {
  _has_bits_[0] |= 0x00000008u;
}
void GetQRCodeResponse::clear_has_style() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetQRCodeResponse::clear_style() {
  style_ = 0u;
  clear_has_style();
}
::google::protobuf::uint32 GetQRCodeResponse::style() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQRCodeResponse.Style)
  return style_;
}
void GetQRCodeResponse::set_style(::google::protobuf::uint32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetQRCodeResponse.Style)
}

// optional string FooterWording = 6;
bool GetQRCodeResponse::has_footerwording() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetQRCodeResponse::set_has_footerwording() {
  _has_bits_[0] |= 0x00000001u;
}
void GetQRCodeResponse::clear_has_footerwording() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetQRCodeResponse::clear_footerwording() {
  footerwording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_footerwording();
}
const ::std::string& GetQRCodeResponse::footerwording() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQRCodeResponse.FooterWording)
  return footerwording_.GetNoArena();
}
void GetQRCodeResponse::set_footerwording(const ::std::string& value) {
  set_has_footerwording();
  footerwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetQRCodeResponse.FooterWording)
}
#if LANG_CXX11
void GetQRCodeResponse::set_footerwording(::std::string&& value) {
  set_has_footerwording();
  footerwording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetQRCodeResponse.FooterWording)
}
#endif
void GetQRCodeResponse::set_footerwording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_footerwording();
  footerwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetQRCodeResponse.FooterWording)
}
void GetQRCodeResponse::set_footerwording(const char* value, size_t size) {
  set_has_footerwording();
  footerwording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetQRCodeResponse.FooterWording)
}
::std::string* GetQRCodeResponse::mutable_footerwording() {
  set_has_footerwording();
  // @@protoc_insertion_point(field_mutable:micromsg.GetQRCodeResponse.FooterWording)
  return footerwording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetQRCodeResponse::release_footerwording() {
  // @@protoc_insertion_point(field_release:micromsg.GetQRCodeResponse.FooterWording)
  clear_has_footerwording();
  return footerwording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetQRCodeResponse::set_allocated_footerwording(::std::string* footerwording) {
  if (footerwording != NULL) {
    set_has_footerwording();
  } else {
    clear_has_footerwording();
  }
  footerwording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), footerwording);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQRCodeResponse.FooterWording)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RevokeChatRoomQRCodeRequest::kBaseRequestFieldNumber;
const int RevokeChatRoomQRCodeRequest::kQRCodeFieldNumber;
const int RevokeChatRoomQRCodeRequest::kChatRoomUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RevokeChatRoomQRCodeRequest::RevokeChatRoomQRCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RevokeChatRoomQRCodeRequest)
}
RevokeChatRoomQRCodeRequest::RevokeChatRoomQRCodeRequest(const RevokeChatRoomQRCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qrcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qrcode()) {
    qrcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcode_);
  }
  chatroomusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomusername()) {
    chatroomusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RevokeChatRoomQRCodeRequest)
}

void RevokeChatRoomQRCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  qrcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

RevokeChatRoomQRCodeRequest::~RevokeChatRoomQRCodeRequest() {
  // @@protoc_insertion_point(destructor:micromsg.RevokeChatRoomQRCodeRequest)
  SharedDtor();
}

void RevokeChatRoomQRCodeRequest::SharedDtor() {
  qrcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void RevokeChatRoomQRCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevokeChatRoomQRCodeRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RevokeChatRoomQRCodeRequest& RevokeChatRoomQRCodeRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RevokeChatRoomQRCodeRequest* RevokeChatRoomQRCodeRequest::New(::google::protobuf::Arena* arena) const {
  RevokeChatRoomQRCodeRequest* n = new RevokeChatRoomQRCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RevokeChatRoomQRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RevokeChatRoomQRCodeRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_qrcode()) {
      GOOGLE_DCHECK(!qrcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qrcode_.UnsafeRawStringPointer())->clear();
    }
    if (has_chatroomusername()) {
      GOOGLE_DCHECK(!chatroomusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RevokeChatRoomQRCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RevokeChatRoomQRCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QRCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qrcode().data(), this->qrcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RevokeChatRoomQRCodeRequest.QRCode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomusername().data(), this->chatroomusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RevokeChatRoomQRCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RevokeChatRoomQRCodeRequest)
  return false;
#undef DO_
}

void RevokeChatRoomQRCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RevokeChatRoomQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string QRCode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcode().data(), this->qrcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeChatRoomQRCodeRequest.QRCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qrcode(), output);
  }

  // optional string ChatRoomUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomusername().data(), this->chatroomusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chatroomusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RevokeChatRoomQRCodeRequest)
}

::google::protobuf::uint8* RevokeChatRoomQRCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RevokeChatRoomQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string QRCode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcode().data(), this->qrcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeChatRoomQRCodeRequest.QRCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qrcode(), target);
  }

  // optional string ChatRoomUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomusername().data(), this->chatroomusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chatroomusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RevokeChatRoomQRCodeRequest)
  return target;
}

size_t RevokeChatRoomQRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RevokeChatRoomQRCodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string QRCode = 2;
    if (has_qrcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrcode());
    }

    // optional string ChatRoomUserName = 3;
    if (has_chatroomusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomusername());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevokeChatRoomQRCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RevokeChatRoomQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeChatRoomQRCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RevokeChatRoomQRCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RevokeChatRoomQRCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RevokeChatRoomQRCodeRequest)
    MergeFrom(*source);
  }
}

void RevokeChatRoomQRCodeRequest::MergeFrom(const RevokeChatRoomQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RevokeChatRoomQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qrcode();
      qrcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcode_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chatroomusername();
      chatroomusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void RevokeChatRoomQRCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RevokeChatRoomQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeChatRoomQRCodeRequest::CopyFrom(const RevokeChatRoomQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RevokeChatRoomQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeChatRoomQRCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void RevokeChatRoomQRCodeRequest::Swap(RevokeChatRoomQRCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RevokeChatRoomQRCodeRequest::InternalSwap(RevokeChatRoomQRCodeRequest* other) {
  qrcode_.Swap(&other->qrcode_);
  chatroomusername_.Swap(&other->chatroomusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RevokeChatRoomQRCodeRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RevokeChatRoomQRCodeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool RevokeChatRoomQRCodeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RevokeChatRoomQRCodeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void RevokeChatRoomQRCodeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void RevokeChatRoomQRCodeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& RevokeChatRoomQRCodeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeChatRoomQRCodeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* RevokeChatRoomQRCodeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeChatRoomQRCodeRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* RevokeChatRoomQRCodeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeChatRoomQRCodeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void RevokeChatRoomQRCodeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeChatRoomQRCodeRequest.BaseRequest)
}

// optional string QRCode = 2;
bool RevokeChatRoomQRCodeRequest::has_qrcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RevokeChatRoomQRCodeRequest::set_has_qrcode() {
  _has_bits_[0] |= 0x00000001u;
}
void RevokeChatRoomQRCodeRequest::clear_has_qrcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void RevokeChatRoomQRCodeRequest::clear_qrcode() {
  qrcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrcode();
}
const ::std::string& RevokeChatRoomQRCodeRequest::qrcode() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
  return qrcode_.GetNoArena();
}
void RevokeChatRoomQRCodeRequest::set_qrcode(const ::std::string& value) {
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
}
#if LANG_CXX11
void RevokeChatRoomQRCodeRequest::set_qrcode(::std::string&& value) {
  set_has_qrcode();
  qrcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
}
#endif
void RevokeChatRoomQRCodeRequest::set_qrcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
}
void RevokeChatRoomQRCodeRequest::set_qrcode(const char* value, size_t size) {
  set_has_qrcode();
  qrcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
}
::std::string* RevokeChatRoomQRCodeRequest::mutable_qrcode() {
  set_has_qrcode();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
  return qrcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RevokeChatRoomQRCodeRequest::release_qrcode() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
  clear_has_qrcode();
  return qrcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RevokeChatRoomQRCodeRequest::set_allocated_qrcode(::std::string* qrcode) {
  if (qrcode != NULL) {
    set_has_qrcode();
  } else {
    clear_has_qrcode();
  }
  qrcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrcode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeChatRoomQRCodeRequest.QRCode)
}

// optional string ChatRoomUserName = 3;
bool RevokeChatRoomQRCodeRequest::has_chatroomusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RevokeChatRoomQRCodeRequest::set_has_chatroomusername() {
  _has_bits_[0] |= 0x00000002u;
}
void RevokeChatRoomQRCodeRequest::clear_has_chatroomusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void RevokeChatRoomQRCodeRequest::clear_chatroomusername() {
  chatroomusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomusername();
}
const ::std::string& RevokeChatRoomQRCodeRequest::chatroomusername() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
  return chatroomusername_.GetNoArena();
}
void RevokeChatRoomQRCodeRequest::set_chatroomusername(const ::std::string& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
}
#if LANG_CXX11
void RevokeChatRoomQRCodeRequest::set_chatroomusername(::std::string&& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
}
#endif
void RevokeChatRoomQRCodeRequest::set_chatroomusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
}
void RevokeChatRoomQRCodeRequest::set_chatroomusername(const char* value, size_t size) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
}
::std::string* RevokeChatRoomQRCodeRequest::mutable_chatroomusername() {
  set_has_chatroomusername();
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
  return chatroomusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RevokeChatRoomQRCodeRequest::release_chatroomusername() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
  clear_has_chatroomusername();
  return chatroomusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RevokeChatRoomQRCodeRequest::set_allocated_chatroomusername(::std::string* chatroomusername) {
  if (chatroomusername != NULL) {
    set_has_chatroomusername();
  } else {
    clear_has_chatroomusername();
  }
  chatroomusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeChatRoomQRCodeRequest.ChatRoomUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RevokeChatRoomQRCodeResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RevokeChatRoomQRCodeResponse::RevokeChatRoomQRCodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RevokeChatRoomQRCodeResponse)
}
RevokeChatRoomQRCodeResponse::RevokeChatRoomQRCodeResponse(const RevokeChatRoomQRCodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RevokeChatRoomQRCodeResponse)
}

void RevokeChatRoomQRCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

RevokeChatRoomQRCodeResponse::~RevokeChatRoomQRCodeResponse() {
  // @@protoc_insertion_point(destructor:micromsg.RevokeChatRoomQRCodeResponse)
  SharedDtor();
}

void RevokeChatRoomQRCodeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void RevokeChatRoomQRCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevokeChatRoomQRCodeResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RevokeChatRoomQRCodeResponse& RevokeChatRoomQRCodeResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RevokeChatRoomQRCodeResponse* RevokeChatRoomQRCodeResponse::New(::google::protobuf::Arena* arena) const {
  RevokeChatRoomQRCodeResponse* n = new RevokeChatRoomQRCodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RevokeChatRoomQRCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RevokeChatRoomQRCodeResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RevokeChatRoomQRCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RevokeChatRoomQRCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RevokeChatRoomQRCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RevokeChatRoomQRCodeResponse)
  return false;
#undef DO_
}

void RevokeChatRoomQRCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RevokeChatRoomQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RevokeChatRoomQRCodeResponse)
}

::google::protobuf::uint8* RevokeChatRoomQRCodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RevokeChatRoomQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RevokeChatRoomQRCodeResponse)
  return target;
}

size_t RevokeChatRoomQRCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RevokeChatRoomQRCodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevokeChatRoomQRCodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RevokeChatRoomQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeChatRoomQRCodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RevokeChatRoomQRCodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RevokeChatRoomQRCodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RevokeChatRoomQRCodeResponse)
    MergeFrom(*source);
  }
}

void RevokeChatRoomQRCodeResponse::MergeFrom(const RevokeChatRoomQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RevokeChatRoomQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void RevokeChatRoomQRCodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RevokeChatRoomQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeChatRoomQRCodeResponse::CopyFrom(const RevokeChatRoomQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RevokeChatRoomQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeChatRoomQRCodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void RevokeChatRoomQRCodeResponse::Swap(RevokeChatRoomQRCodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RevokeChatRoomQRCodeResponse::InternalSwap(RevokeChatRoomQRCodeResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RevokeChatRoomQRCodeResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RevokeChatRoomQRCodeResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool RevokeChatRoomQRCodeResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RevokeChatRoomQRCodeResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void RevokeChatRoomQRCodeResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void RevokeChatRoomQRCodeResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& RevokeChatRoomQRCodeResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.RevokeChatRoomQRCodeResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* RevokeChatRoomQRCodeResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RevokeChatRoomQRCodeResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* RevokeChatRoomQRCodeResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.RevokeChatRoomQRCodeResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void RevokeChatRoomQRCodeResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RevokeChatRoomQRCodeResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendQRCodeByEmailReq::kBaseRequestFieldNumber;
const int SendQRCodeByEmailReq::kQRCodeUserNameFieldNumber;
const int SendQRCodeByEmailReq::kToCountFieldNumber;
const int SendQRCodeByEmailReq::kToListFieldNumber;
const int SendQRCodeByEmailReq::kTittleFieldNumber;
const int SendQRCodeByEmailReq::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendQRCodeByEmailReq::SendQRCodeByEmailReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SendQRCodeByEmailReq)
}
SendQRCodeByEmailReq::SendQRCodeByEmailReq(const SendQRCodeByEmailReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tolist_(from.tolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qrcodeusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qrcodeusername()) {
    qrcodeusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcodeusername_);
  }
  tittle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tittle()) {
    tittle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tittle_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  tocount_ = from.tocount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SendQRCodeByEmailReq)
}

void SendQRCodeByEmailReq::SharedCtor() {
  _cached_size_ = 0;
  qrcodeusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tittle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&tocount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(tocount_));
}

SendQRCodeByEmailReq::~SendQRCodeByEmailReq() {
  // @@protoc_insertion_point(destructor:micromsg.SendQRCodeByEmailReq)
  SharedDtor();
}

void SendQRCodeByEmailReq::SharedDtor() {
  qrcodeusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tittle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SendQRCodeByEmailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendQRCodeByEmailReq::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendQRCodeByEmailReq& SendQRCodeByEmailReq::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendQRCodeByEmailReq* SendQRCodeByEmailReq::New(::google::protobuf::Arena* arena) const {
  SendQRCodeByEmailReq* n = new SendQRCodeByEmailReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendQRCodeByEmailReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SendQRCodeByEmailReq)
  tolist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_qrcodeusername()) {
      GOOGLE_DCHECK(!qrcodeusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qrcodeusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tittle()) {
      GOOGLE_DCHECK(!tittle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tittle_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  tocount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendQRCodeByEmailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SendQRCodeByEmailReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QRCodeUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrcodeusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qrcodeusername().data(), this->qrcodeusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SendQRCodeByEmailReq.QRCodeUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ToCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tocount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tocount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t ToList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Tittle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tittle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tittle().data(), this->tittle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SendQRCodeByEmailReq.Tittle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SendQRCodeByEmailReq.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SendQRCodeByEmailReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SendQRCodeByEmailReq)
  return false;
#undef DO_
}

void SendQRCodeByEmailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SendQRCodeByEmailReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string QRCodeUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcodeusername().data(), this->qrcodeusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendQRCodeByEmailReq.QRCodeUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qrcodeusername(), output);
  }

  // required uint32 ToCount = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tocount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t ToList = 4;
  for (unsigned int i = 0, n = this->tolist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tolist(i), output);
  }

  // optional string Tittle = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tittle().data(), this->tittle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendQRCodeByEmailReq.Tittle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tittle(), output);
  }

  // optional string Content = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendQRCodeByEmailReq.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SendQRCodeByEmailReq)
}

::google::protobuf::uint8* SendQRCodeByEmailReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SendQRCodeByEmailReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string QRCodeUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcodeusername().data(), this->qrcodeusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendQRCodeByEmailReq.QRCodeUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qrcodeusername(), target);
  }

  // required uint32 ToCount = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tocount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t ToList = 4;
  for (unsigned int i = 0, n = this->tolist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->tolist(i), deterministic, target);
  }

  // optional string Tittle = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tittle().data(), this->tittle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendQRCodeByEmailReq.Tittle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tittle(), target);
  }

  // optional string Content = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SendQRCodeByEmailReq.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SendQRCodeByEmailReq)
  return target;
}

size_t SendQRCodeByEmailReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SendQRCodeByEmailReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_tocount()) {
    // required uint32 ToCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tocount());
  }

  return total_size;
}
size_t SendQRCodeByEmailReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SendQRCodeByEmailReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 ToCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tocount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t ToList = 4;
  {
    unsigned int count = this->tolist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tolist(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string QRCodeUserName = 2;
    if (has_qrcodeusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrcodeusername());
    }

    // optional string Tittle = 5;
    if (has_tittle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tittle());
    }

    // optional string Content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendQRCodeByEmailReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SendQRCodeByEmailReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SendQRCodeByEmailReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendQRCodeByEmailReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SendQRCodeByEmailReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SendQRCodeByEmailReq)
    MergeFrom(*source);
  }
}

void SendQRCodeByEmailReq::MergeFrom(const SendQRCodeByEmailReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SendQRCodeByEmailReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tolist_.MergeFrom(from.tolist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qrcodeusername();
      qrcodeusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcodeusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tittle();
      tittle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tittle_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      tocount_ = from.tocount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendQRCodeByEmailReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SendQRCodeByEmailReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendQRCodeByEmailReq::CopyFrom(const SendQRCodeByEmailReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SendQRCodeByEmailReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendQRCodeByEmailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SendQRCodeByEmailReq::Swap(SendQRCodeByEmailReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendQRCodeByEmailReq::InternalSwap(SendQRCodeByEmailReq* other) {
  tolist_.InternalSwap(&other->tolist_);
  qrcodeusername_.Swap(&other->qrcodeusername_);
  tittle_.Swap(&other->tittle_);
  content_.Swap(&other->content_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(tocount_, other->tocount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendQRCodeByEmailReq::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendQRCodeByEmailReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool SendQRCodeByEmailReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SendQRCodeByEmailReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void SendQRCodeByEmailReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void SendQRCodeByEmailReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SendQRCodeByEmailReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SendQRCodeByEmailReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SendQRCodeByEmailReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SendQRCodeByEmailReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SendQRCodeByEmailReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SendQRCodeByEmailReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SendQRCodeByEmailReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendQRCodeByEmailReq.BaseRequest)
}

// optional string QRCodeUserName = 2;
bool SendQRCodeByEmailReq::has_qrcodeusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendQRCodeByEmailReq::set_has_qrcodeusername() {
  _has_bits_[0] |= 0x00000001u;
}
void SendQRCodeByEmailReq::clear_has_qrcodeusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendQRCodeByEmailReq::clear_qrcodeusername() {
  qrcodeusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrcodeusername();
}
const ::std::string& SendQRCodeByEmailReq::qrcodeusername() const {
  // @@protoc_insertion_point(field_get:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
  return qrcodeusername_.GetNoArena();
}
void SendQRCodeByEmailReq::set_qrcodeusername(const ::std::string& value) {
  set_has_qrcodeusername();
  qrcodeusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
}
#if LANG_CXX11
void SendQRCodeByEmailReq::set_qrcodeusername(::std::string&& value) {
  set_has_qrcodeusername();
  qrcodeusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
}
#endif
void SendQRCodeByEmailReq::set_qrcodeusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrcodeusername();
  qrcodeusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
}
void SendQRCodeByEmailReq::set_qrcodeusername(const char* value, size_t size) {
  set_has_qrcodeusername();
  qrcodeusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
}
::std::string* SendQRCodeByEmailReq::mutable_qrcodeusername() {
  set_has_qrcodeusername();
  // @@protoc_insertion_point(field_mutable:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
  return qrcodeusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendQRCodeByEmailReq::release_qrcodeusername() {
  // @@protoc_insertion_point(field_release:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
  clear_has_qrcodeusername();
  return qrcodeusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendQRCodeByEmailReq::set_allocated_qrcodeusername(::std::string* qrcodeusername) {
  if (qrcodeusername != NULL) {
    set_has_qrcodeusername();
  } else {
    clear_has_qrcodeusername();
  }
  qrcodeusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrcodeusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendQRCodeByEmailReq.QRCodeUserName)
}

// required uint32 ToCount = 3;
bool SendQRCodeByEmailReq::has_tocount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SendQRCodeByEmailReq::set_has_tocount() {
  _has_bits_[0] |= 0x00000010u;
}
void SendQRCodeByEmailReq::clear_has_tocount() {
  _has_bits_[0] &= ~0x00000010u;
}
void SendQRCodeByEmailReq::clear_tocount() {
  tocount_ = 0u;
  clear_has_tocount();
}
::google::protobuf::uint32 SendQRCodeByEmailReq::tocount() const {
  // @@protoc_insertion_point(field_get:micromsg.SendQRCodeByEmailReq.ToCount)
  return tocount_;
}
void SendQRCodeByEmailReq::set_tocount(::google::protobuf::uint32 value) {
  set_has_tocount();
  tocount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendQRCodeByEmailReq.ToCount)
}

// repeated .micromsg.SKBuiltinString_t ToList = 4;
int SendQRCodeByEmailReq::tolist_size() const {
  return tolist_.size();
}
void SendQRCodeByEmailReq::clear_tolist() {
  tolist_.Clear();
}
const ::micromsg::SKBuiltinString_t& SendQRCodeByEmailReq::tolist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SendQRCodeByEmailReq.ToList)
  return tolist_.Get(index);
}
::micromsg::SKBuiltinString_t* SendQRCodeByEmailReq::mutable_tolist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SendQRCodeByEmailReq.ToList)
  return tolist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* SendQRCodeByEmailReq::add_tolist() {
  // @@protoc_insertion_point(field_add:micromsg.SendQRCodeByEmailReq.ToList)
  return tolist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
SendQRCodeByEmailReq::mutable_tolist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SendQRCodeByEmailReq.ToList)
  return &tolist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
SendQRCodeByEmailReq::tolist() const {
  // @@protoc_insertion_point(field_list:micromsg.SendQRCodeByEmailReq.ToList)
  return tolist_;
}

// optional string Tittle = 5;
bool SendQRCodeByEmailReq::has_tittle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendQRCodeByEmailReq::set_has_tittle() {
  _has_bits_[0] |= 0x00000002u;
}
void SendQRCodeByEmailReq::clear_has_tittle() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendQRCodeByEmailReq::clear_tittle() {
  tittle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tittle();
}
const ::std::string& SendQRCodeByEmailReq::tittle() const {
  // @@protoc_insertion_point(field_get:micromsg.SendQRCodeByEmailReq.Tittle)
  return tittle_.GetNoArena();
}
void SendQRCodeByEmailReq::set_tittle(const ::std::string& value) {
  set_has_tittle();
  tittle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SendQRCodeByEmailReq.Tittle)
}
#if LANG_CXX11
void SendQRCodeByEmailReq::set_tittle(::std::string&& value) {
  set_has_tittle();
  tittle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SendQRCodeByEmailReq.Tittle)
}
#endif
void SendQRCodeByEmailReq::set_tittle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tittle();
  tittle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SendQRCodeByEmailReq.Tittle)
}
void SendQRCodeByEmailReq::set_tittle(const char* value, size_t size) {
  set_has_tittle();
  tittle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SendQRCodeByEmailReq.Tittle)
}
::std::string* SendQRCodeByEmailReq::mutable_tittle() {
  set_has_tittle();
  // @@protoc_insertion_point(field_mutable:micromsg.SendQRCodeByEmailReq.Tittle)
  return tittle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendQRCodeByEmailReq::release_tittle() {
  // @@protoc_insertion_point(field_release:micromsg.SendQRCodeByEmailReq.Tittle)
  clear_has_tittle();
  return tittle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendQRCodeByEmailReq::set_allocated_tittle(::std::string* tittle) {
  if (tittle != NULL) {
    set_has_tittle();
  } else {
    clear_has_tittle();
  }
  tittle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tittle);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendQRCodeByEmailReq.Tittle)
}

// optional string Content = 6;
bool SendQRCodeByEmailReq::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SendQRCodeByEmailReq::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void SendQRCodeByEmailReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void SendQRCodeByEmailReq::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& SendQRCodeByEmailReq::content() const {
  // @@protoc_insertion_point(field_get:micromsg.SendQRCodeByEmailReq.Content)
  return content_.GetNoArena();
}
void SendQRCodeByEmailReq::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SendQRCodeByEmailReq.Content)
}
#if LANG_CXX11
void SendQRCodeByEmailReq::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SendQRCodeByEmailReq.Content)
}
#endif
void SendQRCodeByEmailReq::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SendQRCodeByEmailReq.Content)
}
void SendQRCodeByEmailReq::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SendQRCodeByEmailReq.Content)
}
::std::string* SendQRCodeByEmailReq::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.SendQRCodeByEmailReq.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendQRCodeByEmailReq::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.SendQRCodeByEmailReq.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendQRCodeByEmailReq::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendQRCodeByEmailReq.Content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendQRCodeByEmailResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendQRCodeByEmailResp::SendQRCodeByEmailResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SendQRCodeByEmailResp)
}
SendQRCodeByEmailResp::SendQRCodeByEmailResp(const SendQRCodeByEmailResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SendQRCodeByEmailResp)
}

void SendQRCodeByEmailResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

SendQRCodeByEmailResp::~SendQRCodeByEmailResp() {
  // @@protoc_insertion_point(destructor:micromsg.SendQRCodeByEmailResp)
  SharedDtor();
}

void SendQRCodeByEmailResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SendQRCodeByEmailResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendQRCodeByEmailResp::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendQRCodeByEmailResp& SendQRCodeByEmailResp::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendQRCodeByEmailResp* SendQRCodeByEmailResp::New(::google::protobuf::Arena* arena) const {
  SendQRCodeByEmailResp* n = new SendQRCodeByEmailResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendQRCodeByEmailResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SendQRCodeByEmailResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendQRCodeByEmailResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SendQRCodeByEmailResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SendQRCodeByEmailResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SendQRCodeByEmailResp)
  return false;
#undef DO_
}

void SendQRCodeByEmailResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SendQRCodeByEmailResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SendQRCodeByEmailResp)
}

::google::protobuf::uint8* SendQRCodeByEmailResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SendQRCodeByEmailResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SendQRCodeByEmailResp)
  return target;
}

size_t SendQRCodeByEmailResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SendQRCodeByEmailResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendQRCodeByEmailResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SendQRCodeByEmailResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendQRCodeByEmailResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendQRCodeByEmailResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SendQRCodeByEmailResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SendQRCodeByEmailResp)
    MergeFrom(*source);
  }
}

void SendQRCodeByEmailResp::MergeFrom(const SendQRCodeByEmailResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SendQRCodeByEmailResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void SendQRCodeByEmailResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SendQRCodeByEmailResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendQRCodeByEmailResp::CopyFrom(const SendQRCodeByEmailResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SendQRCodeByEmailResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendQRCodeByEmailResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SendQRCodeByEmailResp::Swap(SendQRCodeByEmailResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendQRCodeByEmailResp::InternalSwap(SendQRCodeByEmailResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendQRCodeByEmailResp::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendQRCodeByEmailResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool SendQRCodeByEmailResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendQRCodeByEmailResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SendQRCodeByEmailResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendQRCodeByEmailResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SendQRCodeByEmailResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SendQRCodeByEmailResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SendQRCodeByEmailResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SendQRCodeByEmailResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SendQRCodeByEmailResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SendQRCodeByEmailResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SendQRCodeByEmailResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendQRCodeByEmailResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardRequest::kBaseRequestFieldNumber;
const int GetCardRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardRequest::GetCardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardRequest)
}
GetCardRequest::GetCardRequest(const GetCardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardRequest)
}

void GetCardRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(type_));
}

GetCardRequest::~GetCardRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardRequest)
  SharedDtor();
}

void GetCardRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetCardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardRequest& GetCardRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardRequest* GetCardRequest::New(::google::protobuf::Arena* arena) const {
  GetCardRequest* n = new GetCardRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardRequest)
  return false;
#undef DO_
}

void GetCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardRequest)
}

::google::protobuf::uint8* GetCardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardRequest)
  return target;
}

size_t GetCardRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCardRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t GetCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardRequest)
    MergeFrom(*source);
  }
}

void GetCardRequest::MergeFrom(const GetCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardRequest::CopyFrom(const GetCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetCardRequest::Swap(GetCardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardRequest::InternalSwap(GetCardRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCardRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCardRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCardRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCardRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCardRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardRequest.BaseRequest)
}

// required uint32 Type = 2;
bool GetCardRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GetCardRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardRequest.Type)
  return type_;
}
void GetCardRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetCardRequest.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardResponse::kBaseResponseFieldNumber;
const int GetCardResponse::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardResponse::GetCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardResponse)
}
GetCardResponse::GetCardResponse(const GetCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::micromsg::SKBuiltinBuffer_t(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardResponse)
}

void GetCardResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(image_));
}

GetCardResponse::~GetCardResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardResponse)
  SharedDtor();
}

void GetCardResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete image_;
  }
}

void GetCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardResponse& GetCardResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardResponse* GetCardResponse::New(::google::protobuf::Arena* arena) const {
  GetCardResponse* n = new GetCardResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_image()) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardResponse)
  return false;
#undef DO_
}

void GetCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardResponse)
}

::google::protobuf::uint8* GetCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Image = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->image_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardResponse)
  return target;
}

size_t GetCardResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCardResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_image()) {
    // required .micromsg.SKBuiltinBuffer_t Image = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  return total_size;
}
size_t GetCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Image = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardResponse)
    MergeFrom(*source);
  }
}

void GetCardResponse::MergeFrom(const GetCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_image()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.image());
    }
  }
}

void GetCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardResponse::CopyFrom(const GetCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  return true;
}

void GetCardResponse::Swap(GetCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardResponse::InternalSwap(GetCardResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(image_, other->image_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCardResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCardResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCardResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCardResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCardResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t Image = 2;
bool GetCardResponse::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardResponse::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardResponse::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardResponse::clear_image() {
  if (image_ != NULL) image_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_image();
}
const ::micromsg::SKBuiltinBuffer_t& GetCardResponse::image() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardResponse.Image)
  return image_ != NULL ? *image_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCardResponse::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardResponse.Image)
  return image_;
}
::micromsg::SKBuiltinBuffer_t* GetCardResponse::release_image() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardResponse.Image)
  clear_has_image();
  ::micromsg::SKBuiltinBuffer_t* temp = image_;
  image_ = NULL;
  return temp;
}
void GetCardResponse::set_allocated_image(::micromsg::SKBuiltinBuffer_t* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardResponse.Image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatRequest::kBaseRequestFieldNumber;
const int HeartBeatRequest::kTimeStampFieldNumber;
const int HeartBeatRequest::kKeyBufFieldNumber;
const int HeartBeatRequest::kBlueToothBroadCastContentFieldNumber;
const int HeartBeatRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatRequest::HeartBeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  if (from.has_bluetoothbroadcastcontent()) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t(*from.bluetoothbroadcastcontent_);
  } else {
    bluetoothbroadcastcontent_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:micromsg.HeartBeatRequest)
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
  if (this != internal_default_instance()) {
    delete bluetoothbroadcastcontent_;
  }
}

void HeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartBeatRequest& HeartBeatRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatRequest* HeartBeatRequest::New(::google::protobuf::Arena* arena) const {
  HeartBeatRequest* n = new HeartBeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.HeartBeatRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_bluetoothbroadcastcontent()) {
      GOOGLE_DCHECK(bluetoothbroadcastcontent_ != NULL);
      bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.HeartBeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TimeStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bluetoothbroadcastcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.HeartBeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.HeartBeatRequest)
  return false;
#undef DO_
}

void HeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.HeartBeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 TimeStamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bluetoothbroadcastcontent_, output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.HeartBeatRequest)
}

::google::protobuf::uint8* HeartBeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.HeartBeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 TimeStamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bluetoothbroadcastcontent_, deterministic, target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.HeartBeatRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_timestamp()) {
    // required uint32 TimeStamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  return total_size;
}
size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.HeartBeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 TimeStamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    if (has_keybuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keybuf_);
    }

    // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
    if (has_bluetoothbroadcastcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bluetoothbroadcastcontent_);
    }

  }
  // optional uint32 Scene = 5;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.HeartBeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.HeartBeatRequest)
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bluetoothbroadcastcontent()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.bluetoothbroadcastcontent());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  if (has_bluetoothbroadcastcontent()) {
    if (!this->bluetoothbroadcastcontent_->IsInitialized()) return false;
  }
  return true;
}

void HeartBeatRequest::Swap(HeartBeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(bluetoothbroadcastcontent_, other->bluetoothbroadcastcontent_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool HeartBeatRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartBeatRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartBeatRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartBeatRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& HeartBeatRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* HeartBeatRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.HeartBeatRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* HeartBeatRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.HeartBeatRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void HeartBeatRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.HeartBeatRequest.BaseRequest)
}

// required uint32 TimeStamp = 2;
bool HeartBeatRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeartBeatRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void HeartBeatRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeartBeatRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 HeartBeatRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatRequest.TimeStamp)
  return timestamp_;
}
void HeartBeatRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HeartBeatRequest.TimeStamp)
}

// optional .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool HeartBeatRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartBeatRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartBeatRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartBeatRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& HeartBeatRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* HeartBeatRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.HeartBeatRequest.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* HeartBeatRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.HeartBeatRequest.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void HeartBeatRequest::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.HeartBeatRequest.KeyBuf)
}

// optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
bool HeartBeatRequest::has_bluetoothbroadcastcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeartBeatRequest::set_has_bluetoothbroadcastcontent() {
  _has_bits_[0] |= 0x00000004u;
}
void HeartBeatRequest::clear_has_bluetoothbroadcastcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeartBeatRequest::clear_bluetoothbroadcastcontent() {
  if (bluetoothbroadcastcontent_ != NULL) bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_bluetoothbroadcastcontent();
}
const ::micromsg::SKBuiltinBuffer_t& HeartBeatRequest::bluetoothbroadcastcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatRequest.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_ != NULL ? *bluetoothbroadcastcontent_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* HeartBeatRequest::mutable_bluetoothbroadcastcontent() {
  set_has_bluetoothbroadcastcontent();
  if (bluetoothbroadcastcontent_ == NULL) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.HeartBeatRequest.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_;
}
::micromsg::SKBuiltinBuffer_t* HeartBeatRequest::release_bluetoothbroadcastcontent() {
  // @@protoc_insertion_point(field_release:micromsg.HeartBeatRequest.BlueToothBroadCastContent)
  clear_has_bluetoothbroadcastcontent();
  ::micromsg::SKBuiltinBuffer_t* temp = bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = NULL;
  return temp;
}
void HeartBeatRequest::set_allocated_bluetoothbroadcastcontent(::micromsg::SKBuiltinBuffer_t* bluetoothbroadcastcontent) {
  delete bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = bluetoothbroadcastcontent;
  if (bluetoothbroadcastcontent) {
    set_has_bluetoothbroadcastcontent();
  } else {
    clear_has_bluetoothbroadcastcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.HeartBeatRequest.BlueToothBroadCastContent)
}

// optional uint32 Scene = 5;
bool HeartBeatRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HeartBeatRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void HeartBeatRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void HeartBeatRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 HeartBeatRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatRequest.Scene)
  return scene_;
}
void HeartBeatRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HeartBeatRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatResponse::kBaseResponseFieldNumber;
const int HeartBeatResponse::kNextTimeFieldNumber;
const int HeartBeatResponse::kSelectorFieldNumber;
const int HeartBeatResponse::kBlueToothBroadCastContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatResponse::HeartBeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_bluetoothbroadcastcontent()) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t(*from.bluetoothbroadcastcontent_);
  } else {
    bluetoothbroadcastcontent_ = NULL;
  }
  ::memcpy(&nexttime_, &from.nexttime_,
    reinterpret_cast<char*>(&selector_) -
    reinterpret_cast<char*>(&nexttime_) + sizeof(selector_));
  // @@protoc_insertion_point(copy_constructor:micromsg.HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&selector_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(selector_));
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:micromsg.HeartBeatResponse)
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete bluetoothbroadcastcontent_;
  }
}

void HeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartBeatResponse& HeartBeatResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatResponse* HeartBeatResponse::New(::google::protobuf::Arena* arena) const {
  HeartBeatResponse* n = new HeartBeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.HeartBeatResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_bluetoothbroadcastcontent()) {
      GOOGLE_DCHECK(bluetoothbroadcastcontent_ != NULL);
      bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&nexttime_, 0, reinterpret_cast<char*>(&selector_) -
      reinterpret_cast<char*>(&nexttime_) + sizeof(selector_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.HeartBeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NextTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nexttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Selector = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bluetoothbroadcastcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.HeartBeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.HeartBeatResponse)
  return false;
#undef DO_
}

void HeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.HeartBeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 NextTime = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nexttime(), output);
  }

  // optional uint32 Selector = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selector(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bluetoothbroadcastcontent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.HeartBeatResponse)
}

::google::protobuf::uint8* HeartBeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.HeartBeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 NextTime = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nexttime(), target);
  }

  // optional uint32 Selector = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selector(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bluetoothbroadcastcontent_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.HeartBeatResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_nexttime()) {
    // required uint32 NextTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexttime());
  }

  return total_size;
}
size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.HeartBeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 NextTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexttime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
  if (has_bluetoothbroadcastcontent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bluetoothbroadcastcontent_);
  }

  // optional uint32 Selector = 3;
  if (has_selector()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.HeartBeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.HeartBeatResponse)
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bluetoothbroadcastcontent()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.bluetoothbroadcastcontent());
    }
    if (cached_has_bits & 0x00000004u) {
      nexttime_ = from.nexttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      selector_ = from.selector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_bluetoothbroadcastcontent()) {
    if (!this->bluetoothbroadcastcontent_->IsInitialized()) return false;
  }
  return true;
}

void HeartBeatResponse::Swap(HeartBeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(bluetoothbroadcastcontent_, other->bluetoothbroadcastcontent_);
  std::swap(nexttime_, other->nexttime_);
  std::swap(selector_, other->selector_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool HeartBeatResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartBeatResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartBeatResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartBeatResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& HeartBeatResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* HeartBeatResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.HeartBeatResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* HeartBeatResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.HeartBeatResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void HeartBeatResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.HeartBeatResponse.BaseResponse)
}

// required uint32 NextTime = 2;
bool HeartBeatResponse::has_nexttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeartBeatResponse::set_has_nexttime() {
  _has_bits_[0] |= 0x00000004u;
}
void HeartBeatResponse::clear_has_nexttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeartBeatResponse::clear_nexttime() {
  nexttime_ = 0u;
  clear_has_nexttime();
}
::google::protobuf::uint32 HeartBeatResponse::nexttime() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatResponse.NextTime)
  return nexttime_;
}
void HeartBeatResponse::set_nexttime(::google::protobuf::uint32 value) {
  set_has_nexttime();
  nexttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HeartBeatResponse.NextTime)
}

// optional uint32 Selector = 3;
bool HeartBeatResponse::has_selector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeartBeatResponse::set_has_selector() {
  _has_bits_[0] |= 0x00000008u;
}
void HeartBeatResponse::clear_has_selector() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeartBeatResponse::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
::google::protobuf::uint32 HeartBeatResponse::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatResponse.Selector)
  return selector_;
}
void HeartBeatResponse::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HeartBeatResponse.Selector)
}

// optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
bool HeartBeatResponse::has_bluetoothbroadcastcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartBeatResponse::set_has_bluetoothbroadcastcontent() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartBeatResponse::clear_has_bluetoothbroadcastcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartBeatResponse::clear_bluetoothbroadcastcontent() {
  if (bluetoothbroadcastcontent_ != NULL) bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_bluetoothbroadcastcontent();
}
const ::micromsg::SKBuiltinBuffer_t& HeartBeatResponse::bluetoothbroadcastcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.HeartBeatResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_ != NULL ? *bluetoothbroadcastcontent_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* HeartBeatResponse::mutable_bluetoothbroadcastcontent() {
  set_has_bluetoothbroadcastcontent();
  if (bluetoothbroadcastcontent_ == NULL) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.HeartBeatResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_;
}
::micromsg::SKBuiltinBuffer_t* HeartBeatResponse::release_bluetoothbroadcastcontent() {
  // @@protoc_insertion_point(field_release:micromsg.HeartBeatResponse.BlueToothBroadCastContent)
  clear_has_bluetoothbroadcastcontent();
  ::micromsg::SKBuiltinBuffer_t* temp = bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = NULL;
  return temp;
}
void HeartBeatResponse::set_allocated_bluetoothbroadcastcontent(::micromsg::SKBuiltinBuffer_t* bluetoothbroadcastcontent) {
  delete bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = bluetoothbroadcastcontent;
  if (bluetoothbroadcastcontent) {
    set_has_bluetoothbroadcastcontent();
  } else {
    clear_has_bluetoothbroadcastcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.HeartBeatResponse.BlueToothBroadCastContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCliDBEncryptInfoRequest::kBaseRequestFieldNumber;
const int GetCliDBEncryptInfoRequest::kCertVersionFieldNumber;
const int GetCliDBEncryptInfoRequest::kCliDBEncryptKeyFieldNumber;
const int GetCliDBEncryptInfoRequest::kCliDBEncryptInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCliDBEncryptInfoRequest::GetCliDBEncryptInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCliDBEncryptInfoRequest)
}
GetCliDBEncryptInfoRequest::GetCliDBEncryptInfoRequest(const GetCliDBEncryptInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_clidbencryptkey()) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptkey_);
  } else {
    clidbencryptkey_ = NULL;
  }
  if (from.has_clidbencryptinfo()) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptinfo_);
  } else {
    clidbencryptinfo_ = NULL;
  }
  certversion_ = from.certversion_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCliDBEncryptInfoRequest)
}

void GetCliDBEncryptInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&certversion_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(certversion_));
}

GetCliDBEncryptInfoRequest::~GetCliDBEncryptInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCliDBEncryptInfoRequest)
  SharedDtor();
}

void GetCliDBEncryptInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptinfo_;
  }
}

void GetCliDBEncryptInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCliDBEncryptInfoRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCliDBEncryptInfoRequest& GetCliDBEncryptInfoRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCliDBEncryptInfoRequest* GetCliDBEncryptInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetCliDBEncryptInfoRequest* n = new GetCliDBEncryptInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCliDBEncryptInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCliDBEncryptInfoRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_clidbencryptkey()) {
      GOOGLE_DCHECK(clidbencryptkey_ != NULL);
      clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clidbencryptinfo()) {
      GOOGLE_DCHECK(clidbencryptinfo_ != NULL);
      clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  certversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCliDBEncryptInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCliDBEncryptInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CertVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_certversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &certversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCliDBEncryptInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCliDBEncryptInfoRequest)
  return false;
#undef DO_
}

void GetCliDBEncryptInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCliDBEncryptInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 CertVersion = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->certversion(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->clidbencryptkey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->clidbencryptinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCliDBEncryptInfoRequest)
}

::google::protobuf::uint8* GetCliDBEncryptInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCliDBEncryptInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 CertVersion = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->certversion(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->clidbencryptkey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->clidbencryptinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCliDBEncryptInfoRequest)
  return target;
}

size_t GetCliDBEncryptInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCliDBEncryptInfoRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_clidbencryptkey()) {
    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptkey_);
  }

  if (has_clidbencryptinfo()) {
    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptinfo_);
  }

  if (has_certversion()) {
    // required uint32 CertVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->certversion());
  }

  return total_size;
}
size_t GetCliDBEncryptInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCliDBEncryptInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptkey_);

    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptinfo_);

    // required uint32 CertVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->certversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCliDBEncryptInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCliDBEncryptInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCliDBEncryptInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCliDBEncryptInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCliDBEncryptInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCliDBEncryptInfoRequest)
    MergeFrom(*source);
  }
}

void GetCliDBEncryptInfoRequest::MergeFrom(const GetCliDBEncryptInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCliDBEncryptInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clidbencryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptkey());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_clidbencryptinfo()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      certversion_ = from.certversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCliDBEncryptInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCliDBEncryptInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCliDBEncryptInfoRequest::CopyFrom(const GetCliDBEncryptInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCliDBEncryptInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCliDBEncryptInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_clidbencryptkey()) {
    if (!this->clidbencryptkey_->IsInitialized()) return false;
  }
  if (has_clidbencryptinfo()) {
    if (!this->clidbencryptinfo_->IsInitialized()) return false;
  }
  return true;
}

void GetCliDBEncryptInfoRequest::Swap(GetCliDBEncryptInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCliDBEncryptInfoRequest::InternalSwap(GetCliDBEncryptInfoRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(clidbencryptkey_, other->clidbencryptkey_);
  std::swap(clidbencryptinfo_, other->clidbencryptinfo_);
  std::swap(certversion_, other->certversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCliDBEncryptInfoRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCliDBEncryptInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCliDBEncryptInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCliDBEncryptInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCliDBEncryptInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCliDBEncryptInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCliDBEncryptInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCliDBEncryptInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCliDBEncryptInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCliDBEncryptInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCliDBEncryptInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCliDBEncryptInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCliDBEncryptInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCliDBEncryptInfoRequest.BaseRequest)
}

// required uint32 CertVersion = 2;
bool GetCliDBEncryptInfoRequest::has_certversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetCliDBEncryptInfoRequest::set_has_certversion() {
  _has_bits_[0] |= 0x00000008u;
}
void GetCliDBEncryptInfoRequest::clear_has_certversion() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetCliDBEncryptInfoRequest::clear_certversion() {
  certversion_ = 0u;
  clear_has_certversion();
}
::google::protobuf::uint32 GetCliDBEncryptInfoRequest::certversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCliDBEncryptInfoRequest.CertVersion)
  return certversion_;
}
void GetCliDBEncryptInfoRequest::set_certversion(::google::protobuf::uint32 value) {
  set_has_certversion();
  certversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetCliDBEncryptInfoRequest.CertVersion)
}

// required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 3;
bool GetCliDBEncryptInfoRequest::has_clidbencryptkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCliDBEncryptInfoRequest::set_has_clidbencryptkey() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCliDBEncryptInfoRequest::clear_has_clidbencryptkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCliDBEncryptInfoRequest::clear_clidbencryptkey() {
  if (clidbencryptkey_ != NULL) clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& GetCliDBEncryptInfoRequest::clidbencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptKey)
  return clidbencryptkey_ != NULL ? *clidbencryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoRequest::mutable_clidbencryptkey() {
  set_has_clidbencryptkey();
  if (clidbencryptkey_ == NULL) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptKey)
  return clidbencryptkey_;
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoRequest::release_clidbencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptKey)
  clear_has_clidbencryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptkey_;
  clidbencryptkey_ = NULL;
  return temp;
}
void GetCliDBEncryptInfoRequest::set_allocated_clidbencryptkey(::micromsg::SKBuiltinBuffer_t* clidbencryptkey) {
  delete clidbencryptkey_;
  clidbencryptkey_ = clidbencryptkey;
  if (clidbencryptkey) {
    set_has_clidbencryptkey();
  } else {
    clear_has_clidbencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptKey)
}

// required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 4;
bool GetCliDBEncryptInfoRequest::has_clidbencryptinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetCliDBEncryptInfoRequest::set_has_clidbencryptinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void GetCliDBEncryptInfoRequest::clear_has_clidbencryptinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetCliDBEncryptInfoRequest::clear_clidbencryptinfo() {
  if (clidbencryptinfo_ != NULL) clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptinfo();
}
const ::micromsg::SKBuiltinBuffer_t& GetCliDBEncryptInfoRequest::clidbencryptinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptInfo)
  return clidbencryptinfo_ != NULL ? *clidbencryptinfo_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoRequest::mutable_clidbencryptinfo() {
  set_has_clidbencryptinfo();
  if (clidbencryptinfo_ == NULL) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptInfo)
  return clidbencryptinfo_;
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoRequest::release_clidbencryptinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptInfo)
  clear_has_clidbencryptinfo();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptinfo_;
  clidbencryptinfo_ = NULL;
  return temp;
}
void GetCliDBEncryptInfoRequest::set_allocated_clidbencryptinfo(::micromsg::SKBuiltinBuffer_t* clidbencryptinfo) {
  delete clidbencryptinfo_;
  clidbencryptinfo_ = clidbencryptinfo;
  if (clidbencryptinfo) {
    set_has_clidbencryptinfo();
  } else {
    clear_has_clidbencryptinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCliDBEncryptInfoRequest.CliDBEncryptInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCliDBEncryptInfoResponse::kBaseResponseFieldNumber;
const int GetCliDBEncryptInfoResponse::kCliDBEncryptKeyFieldNumber;
const int GetCliDBEncryptInfoResponse::kCliDBEncryptInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCliDBEncryptInfoResponse::GetCliDBEncryptInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCliDBEncryptInfoResponse)
}
GetCliDBEncryptInfoResponse::GetCliDBEncryptInfoResponse(const GetCliDBEncryptInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_clidbencryptkey()) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptkey_);
  } else {
    clidbencryptkey_ = NULL;
  }
  if (from.has_clidbencryptinfo()) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptinfo_);
  } else {
    clidbencryptinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCliDBEncryptInfoResponse)
}

void GetCliDBEncryptInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&clidbencryptinfo_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(clidbencryptinfo_));
}

GetCliDBEncryptInfoResponse::~GetCliDBEncryptInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCliDBEncryptInfoResponse)
  SharedDtor();
}

void GetCliDBEncryptInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptinfo_;
  }
}

void GetCliDBEncryptInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCliDBEncryptInfoResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCliDBEncryptInfoResponse& GetCliDBEncryptInfoResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCliDBEncryptInfoResponse* GetCliDBEncryptInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetCliDBEncryptInfoResponse* n = new GetCliDBEncryptInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCliDBEncryptInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCliDBEncryptInfoResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_clidbencryptkey()) {
      GOOGLE_DCHECK(clidbencryptkey_ != NULL);
      clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clidbencryptinfo()) {
      GOOGLE_DCHECK(clidbencryptinfo_ != NULL);
      clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCliDBEncryptInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCliDBEncryptInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCliDBEncryptInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCliDBEncryptInfoResponse)
  return false;
#undef DO_
}

void GetCliDBEncryptInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCliDBEncryptInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clidbencryptkey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->clidbencryptinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCliDBEncryptInfoResponse)
}

::google::protobuf::uint8* GetCliDBEncryptInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCliDBEncryptInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clidbencryptkey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->clidbencryptinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCliDBEncryptInfoResponse)
  return target;
}

size_t GetCliDBEncryptInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCliDBEncryptInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_clidbencryptkey()) {
    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptkey_);
  }

  if (has_clidbencryptinfo()) {
    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptinfo_);
  }

  return total_size;
}
size_t GetCliDBEncryptInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCliDBEncryptInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptkey_);

    // required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clidbencryptinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCliDBEncryptInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCliDBEncryptInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCliDBEncryptInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCliDBEncryptInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCliDBEncryptInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCliDBEncryptInfoResponse)
    MergeFrom(*source);
  }
}

void GetCliDBEncryptInfoResponse::MergeFrom(const GetCliDBEncryptInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCliDBEncryptInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clidbencryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptkey());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_clidbencryptinfo()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptinfo());
    }
  }
}

void GetCliDBEncryptInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCliDBEncryptInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCliDBEncryptInfoResponse::CopyFrom(const GetCliDBEncryptInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCliDBEncryptInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCliDBEncryptInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_clidbencryptkey()) {
    if (!this->clidbencryptkey_->IsInitialized()) return false;
  }
  if (has_clidbencryptinfo()) {
    if (!this->clidbencryptinfo_->IsInitialized()) return false;
  }
  return true;
}

void GetCliDBEncryptInfoResponse::Swap(GetCliDBEncryptInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCliDBEncryptInfoResponse::InternalSwap(GetCliDBEncryptInfoResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(clidbencryptkey_, other->clidbencryptkey_);
  std::swap(clidbencryptinfo_, other->clidbencryptinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCliDBEncryptInfoResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCliDBEncryptInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCliDBEncryptInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCliDBEncryptInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCliDBEncryptInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCliDBEncryptInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCliDBEncryptInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCliDBEncryptInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCliDBEncryptInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCliDBEncryptInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCliDBEncryptInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCliDBEncryptInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCliDBEncryptInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCliDBEncryptInfoResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 2;
bool GetCliDBEncryptInfoResponse::has_clidbencryptkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCliDBEncryptInfoResponse::set_has_clidbencryptkey() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCliDBEncryptInfoResponse::clear_has_clidbencryptkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCliDBEncryptInfoResponse::clear_clidbencryptkey() {
  if (clidbencryptkey_ != NULL) clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& GetCliDBEncryptInfoResponse::clidbencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptKey)
  return clidbencryptkey_ != NULL ? *clidbencryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoResponse::mutable_clidbencryptkey() {
  set_has_clidbencryptkey();
  if (clidbencryptkey_ == NULL) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptKey)
  return clidbencryptkey_;
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoResponse::release_clidbencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptKey)
  clear_has_clidbencryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptkey_;
  clidbencryptkey_ = NULL;
  return temp;
}
void GetCliDBEncryptInfoResponse::set_allocated_clidbencryptkey(::micromsg::SKBuiltinBuffer_t* clidbencryptkey) {
  delete clidbencryptkey_;
  clidbencryptkey_ = clidbencryptkey;
  if (clidbencryptkey) {
    set_has_clidbencryptkey();
  } else {
    clear_has_clidbencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptKey)
}

// required .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 3;
bool GetCliDBEncryptInfoResponse::has_clidbencryptinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetCliDBEncryptInfoResponse::set_has_clidbencryptinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void GetCliDBEncryptInfoResponse::clear_has_clidbencryptinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetCliDBEncryptInfoResponse::clear_clidbencryptinfo() {
  if (clidbencryptinfo_ != NULL) clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptinfo();
}
const ::micromsg::SKBuiltinBuffer_t& GetCliDBEncryptInfoResponse::clidbencryptinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptInfo)
  return clidbencryptinfo_ != NULL ? *clidbencryptinfo_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoResponse::mutable_clidbencryptinfo() {
  set_has_clidbencryptinfo();
  if (clidbencryptinfo_ == NULL) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptInfo)
  return clidbencryptinfo_;
}
::micromsg::SKBuiltinBuffer_t* GetCliDBEncryptInfoResponse::release_clidbencryptinfo() {
  // @@protoc_insertion_point(field_release:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptInfo)
  clear_has_clidbencryptinfo();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptinfo_;
  clidbencryptinfo_ = NULL;
  return temp;
}
void GetCliDBEncryptInfoResponse::set_allocated_clidbencryptinfo(::micromsg::SKBuiltinBuffer_t* clidbencryptinfo) {
  delete clidbencryptinfo_;
  clidbencryptinfo_ = clidbencryptinfo;
  if (clidbencryptinfo) {
    set_has_clidbencryptinfo();
  } else {
    clear_has_clidbencryptinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCliDBEncryptInfoResponse.CliDBEncryptInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetImUnreadMsgCountRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetImUnreadMsgCountRequest::GetImUnreadMsgCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetImUnreadMsgCountRequest)
}
GetImUnreadMsgCountRequest::GetImUnreadMsgCountRequest(const GetImUnreadMsgCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetImUnreadMsgCountRequest)
}

void GetImUnreadMsgCountRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

GetImUnreadMsgCountRequest::~GetImUnreadMsgCountRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetImUnreadMsgCountRequest)
  SharedDtor();
}

void GetImUnreadMsgCountRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetImUnreadMsgCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetImUnreadMsgCountRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetImUnreadMsgCountRequest& GetImUnreadMsgCountRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetImUnreadMsgCountRequest* GetImUnreadMsgCountRequest::New(::google::protobuf::Arena* arena) const {
  GetImUnreadMsgCountRequest* n = new GetImUnreadMsgCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetImUnreadMsgCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetImUnreadMsgCountRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetImUnreadMsgCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetImUnreadMsgCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetImUnreadMsgCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetImUnreadMsgCountRequest)
  return false;
#undef DO_
}

void GetImUnreadMsgCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetImUnreadMsgCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetImUnreadMsgCountRequest)
}

::google::protobuf::uint8* GetImUnreadMsgCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetImUnreadMsgCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetImUnreadMsgCountRequest)
  return target;
}

size_t GetImUnreadMsgCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetImUnreadMsgCountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetImUnreadMsgCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetImUnreadMsgCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImUnreadMsgCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetImUnreadMsgCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetImUnreadMsgCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetImUnreadMsgCountRequest)
    MergeFrom(*source);
  }
}

void GetImUnreadMsgCountRequest::MergeFrom(const GetImUnreadMsgCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetImUnreadMsgCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void GetImUnreadMsgCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetImUnreadMsgCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImUnreadMsgCountRequest::CopyFrom(const GetImUnreadMsgCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetImUnreadMsgCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImUnreadMsgCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetImUnreadMsgCountRequest::Swap(GetImUnreadMsgCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetImUnreadMsgCountRequest::InternalSwap(GetImUnreadMsgCountRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetImUnreadMsgCountRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetImUnreadMsgCountRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetImUnreadMsgCountRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetImUnreadMsgCountRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetImUnreadMsgCountRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetImUnreadMsgCountRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetImUnreadMsgCountRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetImUnreadMsgCountRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetImUnreadMsgCountRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetImUnreadMsgCountRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetImUnreadMsgCountRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetImUnreadMsgCountRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetImUnreadMsgCountRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetImUnreadMsgCountRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetImUnreadMsgCountResponse::kBaseResponseFieldNumber;
const int GetImUnreadMsgCountResponse::kDisplayMsgFieldNumber;
const int GetImUnreadMsgCountResponse::kQQSchemeFieldNumber;
const int GetImUnreadMsgCountResponse::kDownloadUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetImUnreadMsgCountResponse::GetImUnreadMsgCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetImUnreadMsgCountResponse)
}
GetImUnreadMsgCountResponse::GetImUnreadMsgCountResponse(const GetImUnreadMsgCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  displaymsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_displaymsg()) {
    displaymsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displaymsg_);
  }
  qqscheme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qqscheme()) {
    qqscheme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqscheme_);
  }
  downloadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_downloadurl()) {
    downloadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadurl_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetImUnreadMsgCountResponse)
}

void GetImUnreadMsgCountResponse::SharedCtor() {
  _cached_size_ = 0;
  displaymsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqscheme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetImUnreadMsgCountResponse::~GetImUnreadMsgCountResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetImUnreadMsgCountResponse)
  SharedDtor();
}

void GetImUnreadMsgCountResponse::SharedDtor() {
  displaymsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqscheme_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetImUnreadMsgCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetImUnreadMsgCountResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetImUnreadMsgCountResponse& GetImUnreadMsgCountResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetImUnreadMsgCountResponse* GetImUnreadMsgCountResponse::New(::google::protobuf::Arena* arena) const {
  GetImUnreadMsgCountResponse* n = new GetImUnreadMsgCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetImUnreadMsgCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetImUnreadMsgCountResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_displaymsg()) {
      GOOGLE_DCHECK(!displaymsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*displaymsg_.UnsafeRawStringPointer())->clear();
    }
    if (has_qqscheme()) {
      GOOGLE_DCHECK(!qqscheme_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qqscheme_.UnsafeRawStringPointer())->clear();
    }
    if (has_downloadurl()) {
      GOOGLE_DCHECK(!downloadurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*downloadurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetImUnreadMsgCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetImUnreadMsgCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DisplayMsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaymsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaymsg().data(), this->displaymsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetImUnreadMsgCountResponse.DisplayMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QQScheme = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqscheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qqscheme().data(), this->qqscheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetImUnreadMsgCountResponse.QQScheme");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DownloadUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetImUnreadMsgCountResponse.DownloadUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetImUnreadMsgCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetImUnreadMsgCountResponse)
  return false;
#undef DO_
}

void GetImUnreadMsgCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetImUnreadMsgCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string DisplayMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymsg().data(), this->displaymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetImUnreadMsgCountResponse.DisplayMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->displaymsg(), output);
  }

  // optional string QQScheme = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqscheme().data(), this->qqscheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetImUnreadMsgCountResponse.QQScheme");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->qqscheme(), output);
  }

  // optional string DownloadUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetImUnreadMsgCountResponse.DownloadUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->downloadurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetImUnreadMsgCountResponse)
}

::google::protobuf::uint8* GetImUnreadMsgCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetImUnreadMsgCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string DisplayMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymsg().data(), this->displaymsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetImUnreadMsgCountResponse.DisplayMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->displaymsg(), target);
  }

  // optional string QQScheme = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqscheme().data(), this->qqscheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetImUnreadMsgCountResponse.QQScheme");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->qqscheme(), target);
  }

  // optional string DownloadUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetImUnreadMsgCountResponse.DownloadUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->downloadurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetImUnreadMsgCountResponse)
  return target;
}

size_t GetImUnreadMsgCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetImUnreadMsgCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string DisplayMsg = 2;
    if (has_displaymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaymsg());
    }

    // optional string QQScheme = 3;
    if (has_qqscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqscheme());
    }

    // optional string DownloadUrl = 4;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetImUnreadMsgCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetImUnreadMsgCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImUnreadMsgCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetImUnreadMsgCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetImUnreadMsgCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetImUnreadMsgCountResponse)
    MergeFrom(*source);
  }
}

void GetImUnreadMsgCountResponse::MergeFrom(const GetImUnreadMsgCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetImUnreadMsgCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_displaymsg();
      displaymsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displaymsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_qqscheme();
      qqscheme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqscheme_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_downloadurl();
      downloadurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetImUnreadMsgCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetImUnreadMsgCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImUnreadMsgCountResponse::CopyFrom(const GetImUnreadMsgCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetImUnreadMsgCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImUnreadMsgCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetImUnreadMsgCountResponse::Swap(GetImUnreadMsgCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetImUnreadMsgCountResponse::InternalSwap(GetImUnreadMsgCountResponse* other) {
  displaymsg_.Swap(&other->displaymsg_);
  qqscheme_.Swap(&other->qqscheme_);
  downloadurl_.Swap(&other->downloadurl_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetImUnreadMsgCountResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetImUnreadMsgCountResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetImUnreadMsgCountResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetImUnreadMsgCountResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
void GetImUnreadMsgCountResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetImUnreadMsgCountResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetImUnreadMsgCountResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetImUnreadMsgCountResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetImUnreadMsgCountResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetImUnreadMsgCountResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetImUnreadMsgCountResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetImUnreadMsgCountResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetImUnreadMsgCountResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetImUnreadMsgCountResponse.BaseResponse)
}

// optional string DisplayMsg = 2;
bool GetImUnreadMsgCountResponse::has_displaymsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetImUnreadMsgCountResponse::set_has_displaymsg() {
  _has_bits_[0] |= 0x00000001u;
}
void GetImUnreadMsgCountResponse::clear_has_displaymsg() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetImUnreadMsgCountResponse::clear_displaymsg() {
  displaymsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displaymsg();
}
const ::std::string& GetImUnreadMsgCountResponse::displaymsg() const {
  // @@protoc_insertion_point(field_get:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
  return displaymsg_.GetNoArena();
}
void GetImUnreadMsgCountResponse::set_displaymsg(const ::std::string& value) {
  set_has_displaymsg();
  displaymsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
}
#if LANG_CXX11
void GetImUnreadMsgCountResponse::set_displaymsg(::std::string&& value) {
  set_has_displaymsg();
  displaymsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
}
#endif
void GetImUnreadMsgCountResponse::set_displaymsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displaymsg();
  displaymsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
}
void GetImUnreadMsgCountResponse::set_displaymsg(const char* value, size_t size) {
  set_has_displaymsg();
  displaymsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
}
::std::string* GetImUnreadMsgCountResponse::mutable_displaymsg() {
  set_has_displaymsg();
  // @@protoc_insertion_point(field_mutable:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
  return displaymsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetImUnreadMsgCountResponse::release_displaymsg() {
  // @@protoc_insertion_point(field_release:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
  clear_has_displaymsg();
  return displaymsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetImUnreadMsgCountResponse::set_allocated_displaymsg(::std::string* displaymsg) {
  if (displaymsg != NULL) {
    set_has_displaymsg();
  } else {
    clear_has_displaymsg();
  }
  displaymsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displaymsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetImUnreadMsgCountResponse.DisplayMsg)
}

// optional string QQScheme = 3;
bool GetImUnreadMsgCountResponse::has_qqscheme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetImUnreadMsgCountResponse::set_has_qqscheme() {
  _has_bits_[0] |= 0x00000002u;
}
void GetImUnreadMsgCountResponse::clear_has_qqscheme() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetImUnreadMsgCountResponse::clear_qqscheme() {
  qqscheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qqscheme();
}
const ::std::string& GetImUnreadMsgCountResponse::qqscheme() const {
  // @@protoc_insertion_point(field_get:micromsg.GetImUnreadMsgCountResponse.QQScheme)
  return qqscheme_.GetNoArena();
}
void GetImUnreadMsgCountResponse::set_qqscheme(const ::std::string& value) {
  set_has_qqscheme();
  qqscheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetImUnreadMsgCountResponse.QQScheme)
}
#if LANG_CXX11
void GetImUnreadMsgCountResponse::set_qqscheme(::std::string&& value) {
  set_has_qqscheme();
  qqscheme_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetImUnreadMsgCountResponse.QQScheme)
}
#endif
void GetImUnreadMsgCountResponse::set_qqscheme(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qqscheme();
  qqscheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetImUnreadMsgCountResponse.QQScheme)
}
void GetImUnreadMsgCountResponse::set_qqscheme(const char* value, size_t size) {
  set_has_qqscheme();
  qqscheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetImUnreadMsgCountResponse.QQScheme)
}
::std::string* GetImUnreadMsgCountResponse::mutable_qqscheme() {
  set_has_qqscheme();
  // @@protoc_insertion_point(field_mutable:micromsg.GetImUnreadMsgCountResponse.QQScheme)
  return qqscheme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetImUnreadMsgCountResponse::release_qqscheme() {
  // @@protoc_insertion_point(field_release:micromsg.GetImUnreadMsgCountResponse.QQScheme)
  clear_has_qqscheme();
  return qqscheme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetImUnreadMsgCountResponse::set_allocated_qqscheme(::std::string* qqscheme) {
  if (qqscheme != NULL) {
    set_has_qqscheme();
  } else {
    clear_has_qqscheme();
  }
  qqscheme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qqscheme);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetImUnreadMsgCountResponse.QQScheme)
}

// optional string DownloadUrl = 4;
bool GetImUnreadMsgCountResponse::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetImUnreadMsgCountResponse::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000004u;
}
void GetImUnreadMsgCountResponse::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetImUnreadMsgCountResponse::clear_downloadurl() {
  downloadurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downloadurl();
}
const ::std::string& GetImUnreadMsgCountResponse::downloadurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
  return downloadurl_.GetNoArena();
}
void GetImUnreadMsgCountResponse::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
}
#if LANG_CXX11
void GetImUnreadMsgCountResponse::set_downloadurl(::std::string&& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
}
#endif
void GetImUnreadMsgCountResponse::set_downloadurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
}
void GetImUnreadMsgCountResponse::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
}
::std::string* GetImUnreadMsgCountResponse::mutable_downloadurl() {
  set_has_downloadurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
  return downloadurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetImUnreadMsgCountResponse::release_downloadurl() {
  // @@protoc_insertion_point(field_release:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
  clear_has_downloadurl();
  return downloadurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetImUnreadMsgCountResponse::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl != NULL) {
    set_has_downloadurl();
  } else {
    clear_has_downloadurl();
  }
  downloadurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downloadurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetImUnreadMsgCountResponse.DownloadUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocImgRequest::kBaseRequestFieldNumber;
const int GetLocImgRequest::kLongitudeFieldNumber;
const int GetLocImgRequest::kLatitudeFieldNumber;
const int GetLocImgRequest::kWidthFieldNumber;
const int GetLocImgRequest::kHeightFieldNumber;
const int GetLocImgRequest::kLanguageFieldNumber;
const int GetLocImgRequest::kMapTypeFieldNumber;
const int GetLocImgRequest::kZoomLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocImgRequest::GetLocImgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLocImgRequest)
}
GetLocImgRequest::GetLocImgRequest(const GetLocImgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&zoomlevel_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(zoomlevel_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLocImgRequest)
}

void GetLocImgRequest::SharedCtor() {
  _cached_size_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&zoomlevel_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(zoomlevel_));
}

GetLocImgRequest::~GetLocImgRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetLocImgRequest)
  SharedDtor();
}

void GetLocImgRequest::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetLocImgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocImgRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLocImgRequest& GetLocImgRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLocImgRequest* GetLocImgRequest::New(::google::protobuf::Arena* arena) const {
  GetLocImgRequest* n = new GetLocImgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLocImgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLocImgRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&zoomlevel_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(zoomlevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLocImgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLocImgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLocImgRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MapType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_maptype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maptype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ZoomLevel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_zoomlevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoomlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLocImgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLocImgRequest)
  return false;
#undef DO_
}

void GetLocImgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLocImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required float Longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // required float Latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // required uint32 Width = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // required uint32 Height = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // optional string Language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLocImgRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->language(), output);
  }

  // required uint32 MapType = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maptype(), output);
  }

  // required uint32 ZoomLevel = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zoomlevel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLocImgRequest)
}

::google::protobuf::uint8* GetLocImgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLocImgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required float Longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // required float Latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // required uint32 Width = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // required uint32 Height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // optional string Language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLocImgRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->language(), target);
  }

  // required uint32 MapType = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maptype(), target);
  }

  // required uint32 ZoomLevel = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->zoomlevel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLocImgRequest)
  return target;
}

size_t GetLocImgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetLocImgRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_longitude()) {
    // required float Longitude = 2;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float Latitude = 3;
    total_size += 1 + 4;
  }

  if (has_width()) {
    // required uint32 Width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 Height = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_maptype()) {
    // required uint32 MapType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maptype());
  }

  if (has_zoomlevel()) {
    // required uint32 ZoomLevel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoomlevel());
  }

  return total_size;
}
size_t GetLocImgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLocImgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required float Longitude = 2;
    total_size += 1 + 4;

    // required float Latitude = 3;
    total_size += 1 + 4;

    // required uint32 Width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 Height = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 MapType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maptype());

    // required uint32 ZoomLevel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zoomlevel());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Language = 6;
  if (has_language()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocImgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLocImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocImgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocImgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLocImgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLocImgRequest)
    MergeFrom(*source);
  }
}

void GetLocImgRequest::MergeFrom(const GetLocImgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLocImgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      maptype_ = from.maptype_;
    }
    if (cached_has_bits & 0x00000080u) {
      zoomlevel_ = from.zoomlevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLocImgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLocImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocImgRequest::CopyFrom(const GetLocImgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLocImgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocImgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetLocImgRequest::Swap(GetLocImgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLocImgRequest::InternalSwap(GetLocImgRequest* other) {
  language_.Swap(&other->language_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(maptype_, other->maptype_);
  std::swap(zoomlevel_, other->zoomlevel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLocImgRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLocImgRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetLocImgRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLocImgRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLocImgRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLocImgRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetLocImgRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetLocImgRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocImgRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetLocImgRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocImgRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetLocImgRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocImgRequest.BaseRequest)
}

// required float Longitude = 2;
bool GetLocImgRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLocImgRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLocImgRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLocImgRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float GetLocImgRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.Longitude)
  return longitude_;
}
void GetLocImgRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocImgRequest.Longitude)
}

// required float Latitude = 3;
bool GetLocImgRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetLocImgRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void GetLocImgRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetLocImgRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float GetLocImgRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.Latitude)
  return latitude_;
}
void GetLocImgRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocImgRequest.Latitude)
}

// required uint32 Width = 4;
bool GetLocImgRequest::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetLocImgRequest::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void GetLocImgRequest::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetLocImgRequest::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 GetLocImgRequest::width() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.Width)
  return width_;
}
void GetLocImgRequest::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocImgRequest.Width)
}

// required uint32 Height = 5;
bool GetLocImgRequest::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetLocImgRequest::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void GetLocImgRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetLocImgRequest::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 GetLocImgRequest::height() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.Height)
  return height_;
}
void GetLocImgRequest::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocImgRequest.Height)
}

// optional string Language = 6;
bool GetLocImgRequest::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLocImgRequest::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLocImgRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLocImgRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& GetLocImgRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.Language)
  return language_.GetNoArena();
}
void GetLocImgRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLocImgRequest.Language)
}
#if LANG_CXX11
void GetLocImgRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLocImgRequest.Language)
}
#endif
void GetLocImgRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLocImgRequest.Language)
}
void GetLocImgRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLocImgRequest.Language)
}
::std::string* GetLocImgRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocImgRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLocImgRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocImgRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLocImgRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocImgRequest.Language)
}

// required uint32 MapType = 7;
bool GetLocImgRequest::has_maptype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetLocImgRequest::set_has_maptype() {
  _has_bits_[0] |= 0x00000040u;
}
void GetLocImgRequest::clear_has_maptype() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetLocImgRequest::clear_maptype() {
  maptype_ = 0u;
  clear_has_maptype();
}
::google::protobuf::uint32 GetLocImgRequest::maptype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.MapType)
  return maptype_;
}
void GetLocImgRequest::set_maptype(::google::protobuf::uint32 value) {
  set_has_maptype();
  maptype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocImgRequest.MapType)
}

// required uint32 ZoomLevel = 8;
bool GetLocImgRequest::has_zoomlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetLocImgRequest::set_has_zoomlevel() {
  _has_bits_[0] |= 0x00000080u;
}
void GetLocImgRequest::clear_has_zoomlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetLocImgRequest::clear_zoomlevel() {
  zoomlevel_ = 0u;
  clear_has_zoomlevel();
}
::google::protobuf::uint32 GetLocImgRequest::zoomlevel() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgRequest.ZoomLevel)
  return zoomlevel_;
}
void GetLocImgRequest::set_zoomlevel(::google::protobuf::uint32 value) {
  set_has_zoomlevel();
  zoomlevel_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocImgRequest.ZoomLevel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocImgResponse::kBaseResponseFieldNumber;
const int GetLocImgResponse::kImgBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocImgResponse::GetLocImgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLocImgResponse)
}
GetLocImgResponse::GetLocImgResponse(const GetLocImgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLocImgResponse)
}

void GetLocImgResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&imgbuf_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(imgbuf_));
}

GetLocImgResponse::~GetLocImgResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetLocImgResponse)
  SharedDtor();
}

void GetLocImgResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void GetLocImgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocImgResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLocImgResponse& GetLocImgResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLocImgResponse* GetLocImgResponse::New(::google::protobuf::Arena* arena) const {
  GetLocImgResponse* n = new GetLocImgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLocImgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLocImgResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLocImgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLocImgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLocImgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLocImgResponse)
  return false;
#undef DO_
}

void GetLocImgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLocImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imgbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLocImgResponse)
}

::google::protobuf::uint8* GetLocImgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLocImgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imgbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLocImgResponse)
  return target;
}

size_t GetLocImgResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetLocImgResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  return total_size;
}
size_t GetLocImgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLocImgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocImgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLocImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocImgResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocImgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLocImgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLocImgResponse)
    MergeFrom(*source);
  }
}

void GetLocImgResponse::MergeFrom(const GetLocImgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLocImgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
  }
}

void GetLocImgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLocImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocImgResponse::CopyFrom(const GetLocImgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLocImgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocImgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  return true;
}

void GetLocImgResponse::Swap(GetLocImgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLocImgResponse::InternalSwap(GetLocImgResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLocImgResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLocImgResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetLocImgResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLocImgResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLocImgResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLocImgResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetLocImgResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetLocImgResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocImgResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetLocImgResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocImgResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetLocImgResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocImgResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 2;
bool GetLocImgResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLocImgResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLocImgResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLocImgResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& GetLocImgResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocImgResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetLocImgResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocImgResponse.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* GetLocImgResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocImgResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void GetLocImgResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocImgResponse.ImgBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWeChatOutCouponsRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWeChatOutCouponsRequest::GetWeChatOutCouponsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetWeChatOutCouponsRequest)
}
GetWeChatOutCouponsRequest::GetWeChatOutCouponsRequest(const GetWeChatOutCouponsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetWeChatOutCouponsRequest)
}

void GetWeChatOutCouponsRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

GetWeChatOutCouponsRequest::~GetWeChatOutCouponsRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetWeChatOutCouponsRequest)
  SharedDtor();
}

void GetWeChatOutCouponsRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetWeChatOutCouponsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWeChatOutCouponsRequest::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWeChatOutCouponsRequest& GetWeChatOutCouponsRequest::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetWeChatOutCouponsRequest* GetWeChatOutCouponsRequest::New(::google::protobuf::Arena* arena) const {
  GetWeChatOutCouponsRequest* n = new GetWeChatOutCouponsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWeChatOutCouponsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetWeChatOutCouponsRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetWeChatOutCouponsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetWeChatOutCouponsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetWeChatOutCouponsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetWeChatOutCouponsRequest)
  return false;
#undef DO_
}

void GetWeChatOutCouponsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetWeChatOutCouponsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetWeChatOutCouponsRequest)
}

::google::protobuf::uint8* GetWeChatOutCouponsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetWeChatOutCouponsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetWeChatOutCouponsRequest)
  return target;
}

size_t GetWeChatOutCouponsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetWeChatOutCouponsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWeChatOutCouponsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetWeChatOutCouponsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWeChatOutCouponsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWeChatOutCouponsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetWeChatOutCouponsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetWeChatOutCouponsRequest)
    MergeFrom(*source);
  }
}

void GetWeChatOutCouponsRequest::MergeFrom(const GetWeChatOutCouponsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetWeChatOutCouponsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void GetWeChatOutCouponsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetWeChatOutCouponsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWeChatOutCouponsRequest::CopyFrom(const GetWeChatOutCouponsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetWeChatOutCouponsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWeChatOutCouponsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetWeChatOutCouponsRequest::Swap(GetWeChatOutCouponsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWeChatOutCouponsRequest::InternalSwap(GetWeChatOutCouponsRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWeChatOutCouponsRequest::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWeChatOutCouponsRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetWeChatOutCouponsRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetWeChatOutCouponsRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetWeChatOutCouponsRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetWeChatOutCouponsRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetWeChatOutCouponsRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeChatOutCouponsRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetWeChatOutCouponsRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeChatOutCouponsRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetWeChatOutCouponsRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeChatOutCouponsRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetWeChatOutCouponsRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeChatOutCouponsRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWeChatOutCouponsResponse::kBaseResponseFieldNumber;
const int GetWeChatOutCouponsResponse::kCouponsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWeChatOutCouponsResponse::GetWeChatOutCouponsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmweb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetWeChatOutCouponsResponse)
}
GetWeChatOutCouponsResponse::GetWeChatOutCouponsResponse(const GetWeChatOutCouponsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coupons_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_coupons()) {
    coupons_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coupons_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetWeChatOutCouponsResponse)
}

void GetWeChatOutCouponsResponse::SharedCtor() {
  _cached_size_ = 0;
  coupons_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetWeChatOutCouponsResponse::~GetWeChatOutCouponsResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetWeChatOutCouponsResponse)
  SharedDtor();
}

void GetWeChatOutCouponsResponse::SharedDtor() {
  coupons_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetWeChatOutCouponsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWeChatOutCouponsResponse::descriptor() {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWeChatOutCouponsResponse& GetWeChatOutCouponsResponse::default_instance() {
  protobuf_mmweb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetWeChatOutCouponsResponse* GetWeChatOutCouponsResponse::New(::google::protobuf::Arena* arena) const {
  GetWeChatOutCouponsResponse* n = new GetWeChatOutCouponsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWeChatOutCouponsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetWeChatOutCouponsResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_coupons()) {
      GOOGLE_DCHECK(!coupons_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*coupons_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetWeChatOutCouponsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetWeChatOutCouponsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Coupons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coupons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coupons().data(), this->coupons().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetWeChatOutCouponsResponse.Coupons");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetWeChatOutCouponsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetWeChatOutCouponsResponse)
  return false;
#undef DO_
}

void GetWeChatOutCouponsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetWeChatOutCouponsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Coupons = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coupons().data(), this->coupons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeChatOutCouponsResponse.Coupons");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->coupons(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetWeChatOutCouponsResponse)
}

::google::protobuf::uint8* GetWeChatOutCouponsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetWeChatOutCouponsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Coupons = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coupons().data(), this->coupons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeChatOutCouponsResponse.Coupons");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->coupons(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetWeChatOutCouponsResponse)
  return target;
}

size_t GetWeChatOutCouponsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetWeChatOutCouponsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string Coupons = 2;
  if (has_coupons()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coupons());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWeChatOutCouponsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetWeChatOutCouponsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWeChatOutCouponsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWeChatOutCouponsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetWeChatOutCouponsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetWeChatOutCouponsResponse)
    MergeFrom(*source);
  }
}

void GetWeChatOutCouponsResponse::MergeFrom(const GetWeChatOutCouponsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetWeChatOutCouponsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_coupons();
      coupons_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coupons_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetWeChatOutCouponsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetWeChatOutCouponsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWeChatOutCouponsResponse::CopyFrom(const GetWeChatOutCouponsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetWeChatOutCouponsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWeChatOutCouponsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetWeChatOutCouponsResponse::Swap(GetWeChatOutCouponsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWeChatOutCouponsResponse::InternalSwap(GetWeChatOutCouponsResponse* other) {
  coupons_.Swap(&other->coupons_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWeChatOutCouponsResponse::GetMetadata() const {
  protobuf_mmweb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmweb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWeChatOutCouponsResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetWeChatOutCouponsResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetWeChatOutCouponsResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetWeChatOutCouponsResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetWeChatOutCouponsResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetWeChatOutCouponsResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeChatOutCouponsResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetWeChatOutCouponsResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeChatOutCouponsResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetWeChatOutCouponsResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeChatOutCouponsResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetWeChatOutCouponsResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeChatOutCouponsResponse.BaseResponse)
}

// optional string Coupons = 2;
bool GetWeChatOutCouponsResponse::has_coupons() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetWeChatOutCouponsResponse::set_has_coupons() {
  _has_bits_[0] |= 0x00000001u;
}
void GetWeChatOutCouponsResponse::clear_has_coupons() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetWeChatOutCouponsResponse::clear_coupons() {
  coupons_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coupons();
}
const ::std::string& GetWeChatOutCouponsResponse::coupons() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeChatOutCouponsResponse.Coupons)
  return coupons_.GetNoArena();
}
void GetWeChatOutCouponsResponse::set_coupons(const ::std::string& value) {
  set_has_coupons();
  coupons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetWeChatOutCouponsResponse.Coupons)
}
#if LANG_CXX11
void GetWeChatOutCouponsResponse::set_coupons(::std::string&& value) {
  set_has_coupons();
  coupons_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetWeChatOutCouponsResponse.Coupons)
}
#endif
void GetWeChatOutCouponsResponse::set_coupons(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_coupons();
  coupons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetWeChatOutCouponsResponse.Coupons)
}
void GetWeChatOutCouponsResponse::set_coupons(const char* value, size_t size) {
  set_has_coupons();
  coupons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetWeChatOutCouponsResponse.Coupons)
}
::std::string* GetWeChatOutCouponsResponse::mutable_coupons() {
  set_has_coupons();
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeChatOutCouponsResponse.Coupons)
  return coupons_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetWeChatOutCouponsResponse::release_coupons() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeChatOutCouponsResponse.Coupons)
  clear_has_coupons();
  return coupons_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetWeChatOutCouponsResponse::set_allocated_coupons(::std::string* coupons) {
  if (coupons != NULL) {
    set_has_coupons();
  } else {
    clear_has_coupons();
  }
  coupons_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coupons);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeChatOutCouponsResponse.Coupons)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
